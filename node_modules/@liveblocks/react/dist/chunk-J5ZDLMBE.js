"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }// src/contexts.ts
var _react = require('react');
var RoomContext = _react.createContext.call(void 0, null);
function useRoomOrNull() {
  return _react.useContext.call(void 0, RoomContext);
}
function useIsInsideRoom() {
  const room = useRoomOrNull();
  return room !== null;
}

// src/use-sync-external-store-with-selector.ts







function is(x, y) {
  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
}
function useSyncExternalStoreWithSelector(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {
  const instRef = _react.useRef.call(void 0, null);
  let inst;
  if (instRef.current === null) {
    inst = {
      hasValue: false,
      value: null
    };
    instRef.current = inst;
  } else {
    inst = instRef.current;
  }
  const [getSelection, getServerSelection] = _react.useMemo.call(void 0, () => {
    let hasMemo = false;
    let memoizedSnapshot;
    let memoizedSelection;
    const memoizedSelector = (nextSnapshot) => {
      if (!hasMemo) {
        hasMemo = true;
        memoizedSnapshot = nextSnapshot;
        const nextSelection2 = selector(nextSnapshot);
        if (isEqual !== void 0) {
          if (inst.hasValue) {
            const currentSelection = inst.value;
            if (isEqual(currentSelection, nextSelection2)) {
              memoizedSelection = currentSelection;
              return currentSelection;
            }
          }
        }
        memoizedSelection = nextSelection2;
        return nextSelection2;
      }
      const prevSnapshot = memoizedSnapshot;
      const prevSelection = memoizedSelection;
      if (is(prevSnapshot, nextSnapshot)) {
        return prevSelection;
      }
      const nextSelection = selector(nextSnapshot);
      if (isEqual !== void 0 && isEqual(prevSelection, nextSelection)) {
        memoizedSnapshot = nextSnapshot;
        return prevSelection;
      }
      memoizedSnapshot = nextSnapshot;
      memoizedSelection = nextSelection;
      return nextSelection;
    };
    const maybeGetServerSnapshot = getServerSnapshot === void 0 ? null : getServerSnapshot;
    const getSnapshotWithSelector = () => memoizedSelector(getSnapshot());
    const getServerSnapshotWithSelector = maybeGetServerSnapshot === null ? void 0 : () => memoizedSelector(maybeGetServerSnapshot());
    return [getSnapshotWithSelector, getServerSnapshotWithSelector];
  }, [getSnapshot, getServerSnapshot, selector, isEqual]);
  const value = _react.useSyncExternalStore.call(void 0, 
    subscribe,
    getSelection,
    getServerSelection
  );
  _react.useEffect.call(void 0, () => {
    inst.hasValue = true;
    inst.value = value;
  }, [value]);
  _react.useDebugValue.call(void 0, value);
  return value;
}

// src/use-signal.ts
var identity = (value) => value;
function useSignal(signal, selector, isEqual) {
  return useSyncExternalStoreWithSelector(
    signal.subscribe,
    signal.get,
    signal.get,
    _nullishCoalesce(selector, () => ( identity)),
    isEqual
  );
}

// src/liveblocks.tsx







var _core = require('@liveblocks/core');










// src/config.ts
var SECONDS = 1e3;
var MINUTES = 60 * SECONDS;
var config = {
  SMOOTH_DELAY: 1 * SECONDS,
  NOTIFICATIONS_POLL_INTERVAL: 1 * MINUTES,
  NOTIFICATIONS_MAX_STALE_TIME: 5 * SECONDS,
  ROOM_THREADS_POLL_INTERVAL: 5 * MINUTES,
  ROOM_THREADS_MAX_STALE_TIME: 5 * SECONDS,
  USER_THREADS_POLL_INTERVAL: 1 * MINUTES,
  USER_THREADS_MAX_STALE_TIME: 5 * SECONDS,
  HISTORY_VERSIONS_POLL_INTERVAL: 1 * MINUTES,
  HISTORY_VERSIONS_MAX_STALE_TIME: 5 * SECONDS,
  NOTIFICATION_SETTINGS_POLL_INTERVAL: 1 * MINUTES,
  NOTIFICATION_SETTINGS_MAX_STALE_TIME: 5 * SECONDS
};

// src/lib/AsyncResult.ts
var ASYNC_LOADING = Object.freeze({ isLoading: true });
var ASYNC_ERR = (error) => Object.freeze({ isLoading: false, error });
function ASYNC_OK(fieldOrData, data) {
  if (arguments.length === 1) {
    return Object.freeze({ isLoading: false, data: fieldOrData });
  } else {
    return Object.freeze({ isLoading: false, [fieldOrData]: data });
  }
}

// src/lib/itertools.ts
function find(it, predicate) {
  for (const item of it) {
    if (predicate(item)) return item;
  }
  return void 0;
}
function count(it, predicate) {
  let total = 0;
  for (const item of it) {
    if (predicate(item)) total++;
  }
  return total;
}

// src/lib/ssr.ts
function ensureNotServerSide() {
  if (typeof window === "undefined") {
    throw new Error(
      "You cannot use the Suspense version of Liveblocks hooks server side. Make sure to only call them client side by using a ClientSideSuspense wrapper.\nFor tips, see https://liveblocks.io/docs/api-reference/liveblocks-react#ClientSideSuspense"
    );
  }
}

// src/lib/use-initial.ts


// src/lib/use-latest.ts

function useLatest(value) {
  const ref = _react.useRef.call(void 0, value);
  _react.useEffect.call(void 0, () => {
    ref.current = value;
  }, [value]);
  return ref;
}

// src/lib/use-initial.ts
var noop = (state) => state;
function useInitial(value) {
  return _react.useReducer.call(void 0, noop, value)[0];
}
function useInitialUnlessFunction(latestValue) {
  const frozenValue = useInitial(latestValue);
  if (typeof frozenValue === "function") {
    const ref = useLatest(latestValue);
    return _react.useCallback.call(void 0, (...args) => ref.current(...args), [
      ref
    ]);
  } else {
    return frozenValue;
  }
}

// src/lib/use-polyfill.ts
var use = (
  // React.use ||
  (promise) => {
    if (promise.status === "pending") {
      throw promise;
    } else if (promise.status === "fulfilled") {
      return promise.value;
    } else if (promise.status === "rejected") {
      throw promise.reason;
    } else {
      promise.status = "pending";
      promise.then(
        (v) => {
          promise.status = "fulfilled";
          promise.value = v;
        },
        (e) => {
          promise.status = "rejected";
          promise.reason = e;
        }
      );
      throw promise;
    }
  }
);

// src/umbrella-store.ts
















// src/lib/autobind.ts
function autobind(self) {
  const seen = /* @__PURE__ */ new Set();
  seen.add("constructor");
  let obj = self.constructor.prototype;
  do {
    for (const key of Reflect.ownKeys(obj)) {
      if (seen.has(key)) continue;
      const descriptor = Reflect.getOwnPropertyDescriptor(obj, key);
      if (typeof _optionalChain([descriptor, 'optionalAccess', _ => _.value]) === "function") {
        seen.add(key);
        self[key] = self[key].bind(self);
      }
    }
  } while ((obj = Reflect.getPrototypeOf(obj)) && obj !== Object.prototype);
}

// src/lib/shallow2.ts

function shallow2(a, b) {
  if (!_core.isPlainObject.call(void 0, a) || !_core.isPlainObject.call(void 0, b)) {
    return _core.shallow.call(void 0, a, b);
  }
  const keysA = Object.keys(a);
  if (keysA.length !== Object.keys(b).length) {
    return false;
  }
  return keysA.every(
    (key) => Object.prototype.hasOwnProperty.call(b, key) && _core.shallow.call(void 0, a[key], b[key])
  );
}

// src/ThreadDB.ts


// src/lib/querying.ts

function makeThreadsFilter(query) {
  return (thread) => matchesQuery(thread, query) && matchesMetadata(thread, query);
}
function matchesQuery(thread, q) {
  return q.resolved === void 0 || thread.resolved === q.resolved;
}
function matchesMetadata(thread, q) {
  const metadata = thread.metadata;
  return q.metadata === void 0 || Object.entries(q.metadata).every(
    ([key, op]) => (
      // Ignore explicit-undefined filters
      // Boolean logic: op? => value matches the operator
      op === void 0 || matchesOperator(metadata[key], op)
    )
  );
}
function matchesOperator(value, op) {
  if (op === null) {
    return value === void 0;
  } else if (_core.isStartsWithOperator.call(void 0, op)) {
    return typeof value === "string" && value.startsWith(op.startsWith);
  } else {
    return value === op;
  }
}

// src/ThreadDB.ts
function sanitizeThread(thread) {
  if (thread.deletedAt) {
    if (thread.comments.length > 0) {
      return { ...thread, comments: [] };
    }
  }
  const hasComment = thread.comments.some((c) => !c.deletedAt);
  if (!hasComment) {
    return { ...thread, deletedAt: /* @__PURE__ */ new Date(), comments: [] };
  }
  return thread;
}
var ThreadDB = class _ThreadDB {
  #byId;
  #asc;
  #desc;
  // This signal will be notified on every mutation
  
  constructor() {
    this.#asc = _core.SortedList.from([], (t1, t2) => {
      const d1 = t1.createdAt;
      const d2 = t2.createdAt;
      return d1 < d2 ? true : d1 === d2 ? t1.id < t2.id : false;
    });
    this.#desc = _core.SortedList.from([], (t1, t2) => {
      const d2 = t2.updatedAt;
      const d1 = t1.updatedAt;
      return d2 < d1 ? true : d2 === d1 ? t2.id < t1.id : false;
    });
    this.#byId = /* @__PURE__ */ new Map();
    this.signal = new (0, _core.MutableSignal)(this);
  }
  //
  // Public APIs
  //
  clone() {
    const newPool = new _ThreadDB();
    newPool.#byId = new Map(this.#byId);
    newPool.#asc = this.#asc.clone();
    newPool.#desc = this.#desc.clone();
    return newPool;
  }
  /** Returns an existing thread by ID. Will never return a deleted thread. */
  get(threadId) {
    const thread = this.getEvenIfDeleted(threadId);
    return _optionalChain([thread, 'optionalAccess', _2 => _2.deletedAt]) ? void 0 : thread;
  }
  /** Returns the (possibly deleted) thread by ID. */
  getEvenIfDeleted(threadId) {
    return this.#byId.get(threadId);
  }
  /** Adds or updates a thread in the DB. If the newly given thread is a deleted one, it will get deleted. */
  upsert(thread) {
    this.signal.mutate(() => {
      thread = sanitizeThread(thread);
      const id = thread.id;
      const toRemove = this.#byId.get(id);
      if (toRemove) {
        if (toRemove.deletedAt) return false;
        this.#asc.remove(toRemove);
        this.#desc.remove(toRemove);
      }
      if (!thread.deletedAt) {
        this.#asc.add(thread);
        this.#desc.add(thread);
      }
      this.#byId.set(id, thread);
      return true;
    });
  }
  /** Like .upsert(), except it won't update if a thread by this ID already exists. */
  // TODO Consider renaming this to just .upsert(). I'm not sure if we really
  // TODO need the raw .upsert(). Would be nice if this behavior was the default.
  upsertIfNewer(thread) {
    const existing = this.get(thread.id);
    if (!existing || thread.updatedAt >= existing.updatedAt) {
      this.upsert(thread);
    }
  }
  applyDelta(newThreads, deletedThreads) {
    _core.batch.call(void 0, () => {
      for (const thread of newThreads) {
        this.upsertIfNewer(thread);
      }
      for (const { id, deletedAt } of deletedThreads) {
        const existing = this.getEvenIfDeleted(id);
        if (!existing) continue;
        this.delete(id, deletedAt);
      }
    });
  }
  /**
   * Marks a thread as deleted. It will no longer pop up in .findMany()
   * queries, but it can still be accessed via `.getEvenIfDeleted()`.
   */
  delete(threadId, deletedAt) {
    const existing = this.#byId.get(threadId);
    if (existing && !existing.deletedAt) {
      this.upsert({ ...existing, deletedAt, updatedAt: deletedAt });
    }
  }
  /**
   * Returns all threads matching a given roomId and query. If roomId is not
   * specified, it will return all threads matching the query, across all
   * rooms.
   *
   * Returns the results in the requested order. Please note:
   *   'asc'  means by createdAt ASC
   *   'desc' means by updatedAt DESC
   *
   * Will never return deleted threads in the result.
   */
  findMany(roomId, query, direction) {
    const index = direction === "desc" ? this.#desc : this.#asc;
    const crit = [];
    if (roomId !== void 0) {
      crit.push((t) => t.roomId === roomId);
    }
    crit.push(makeThreadsFilter(query));
    return Array.from(index.filter((t) => crit.every((pred) => pred(t))));
  }
};

// src/umbrella-store.ts
function makeRoomThreadsQueryKey(roomId, query) {
  return _core.stringify.call(void 0, [roomId, _nullishCoalesce(query, () => ( {}))]);
}
function makeUserThreadsQueryKey(query) {
  return _core.stringify.call(void 0, _nullishCoalesce(query, () => ( {})));
}
function usify(promise) {
  if ("status" in promise) {
    return promise;
  }
  const usable = promise;
  usable.status = "pending";
  usable.then(
    (value) => {
      usable.status = "fulfilled";
      usable.value = value;
    },
    (err) => {
      usable.status = "rejected";
      usable.reason = err;
    }
  );
  return usable;
}
var noop2 = Promise.resolve();
var PaginatedResource = class {
  #signal;
  
  #fetchPage;
  #pendingFetchMore;
  constructor(fetchPage) {
    this.#signal = new (0, _core.Signal)(ASYNC_LOADING);
    this.#fetchPage = fetchPage;
    this.#pendingFetchMore = null;
    this.signal = this.#signal.asReadonly();
    autobind(this);
  }
  get() {
    return this.#signal.get();
  }
  #patch(patch) {
    const state = this.#signal.get();
    if (state.data === void 0) return;
    this.#signal.set(ASYNC_OK({ ...state.data, ...patch }));
  }
  async #fetchMore() {
    const state = this.#signal.get();
    if (!_optionalChain([state, 'access', _3 => _3.data, 'optionalAccess', _4 => _4.cursor]) || state.data.isFetchingMore) {
      return;
    }
    this.#patch({ isFetchingMore: true });
    try {
      const nextCursor = await this.#fetchPage(state.data.cursor);
      this.#patch({
        cursor: nextCursor,
        hasFetchedAll: nextCursor === null,
        fetchMoreError: void 0,
        isFetchingMore: false
      });
    } catch (err) {
      this.#patch({
        isFetchingMore: false,
        fetchMoreError: err
      });
    }
  }
  fetchMore() {
    const state = this.#signal.get();
    if (!_optionalChain([state, 'access', _5 => _5.data, 'optionalAccess', _6 => _6.cursor])) return noop2;
    if (!this.#pendingFetchMore) {
      this.#pendingFetchMore = this.#fetchMore().finally(() => {
        this.#pendingFetchMore = null;
      });
    }
    return this.#pendingFetchMore;
  }
  #cachedPromise = null;
  waitUntilLoaded() {
    if (this.#cachedPromise) {
      return this.#cachedPromise;
    }
    const initialPageFetch$ = _core.autoRetry.call(void 0, 
      () => this.#fetchPage(
        /* cursor */
        void 0
      ),
      5,
      [5e3, 5e3, 1e4, 15e3]
    );
    const promise = usify(initialPageFetch$);
    promise.then(
      (cursor) => {
        this.#signal.set(
          ASYNC_OK({
            cursor,
            hasFetchedAll: cursor === null,
            isFetchingMore: false,
            fetchMoreError: void 0,
            fetchMore: this.fetchMore
          })
        );
      },
      (err) => {
        this.#signal.set(ASYNC_ERR(err));
        setTimeout(() => {
          this.#cachedPromise = null;
          this.#signal.set(ASYNC_LOADING);
        }, 5e3);
      }
    );
    this.#cachedPromise = promise;
    return this.#cachedPromise;
  }
};
var SinglePageResource = class {
  #signal;
  
  #fetchPage;
  constructor(fetchPage) {
    this.#signal = new (0, _core.Signal)(ASYNC_LOADING);
    this.signal = this.#signal.asReadonly();
    this.#fetchPage = fetchPage;
    autobind(this);
  }
  get() {
    return this.#signal.get();
  }
  #cachedPromise = null;
  waitUntilLoaded() {
    if (this.#cachedPromise) {
      return this.#cachedPromise;
    }
    const initialFetcher$ = _core.autoRetry.call(void 0, 
      () => this.#fetchPage(),
      5,
      [5e3, 5e3, 1e4, 15e3]
    );
    const promise = usify(initialFetcher$);
    promise.then(
      () => {
        this.#signal.set(ASYNC_OK(void 0));
      },
      (err) => {
        this.#signal.set(ASYNC_ERR(err));
        setTimeout(() => {
          this.#cachedPromise = null;
          this.#signal.set(ASYNC_LOADING);
        }, 5e3);
      }
    );
    this.#cachedPromise = promise;
    return promise;
  }
};
function createStore_forNotifications() {
  const signal = new (0, _core.MutableSignal)(/* @__PURE__ */ new Map());
  function markRead(notificationId, readAt) {
    signal.mutate((lut) => {
      const existing = lut.get(notificationId);
      if (!existing) {
        return false;
      }
      lut.set(notificationId, { ...existing, readAt });
      return true;
    });
  }
  function markAllRead(readAt) {
    signal.mutate((lut) => {
      for (const n of lut.values()) {
        n.readAt = readAt;
      }
    });
  }
  function deleteOne(inboxNotificationId) {
    signal.mutate((lut) => lut.delete(inboxNotificationId));
  }
  function clear() {
    signal.mutate((lut) => lut.clear());
  }
  function applyDelta(newNotifications, deletedNotifications) {
    signal.mutate((lut) => {
      let mutated = false;
      for (const n of newNotifications) {
        const existing = lut.get(n.id);
        if (existing) {
          const result = compareInboxNotifications(existing, n);
          if (result === 1) continue;
        }
        lut.set(n.id, n);
        mutated = true;
      }
      for (const n of deletedNotifications) {
        lut.delete(n.id);
        mutated = true;
      }
      return mutated;
    });
  }
  function updateAssociatedNotification(newComment) {
    signal.mutate((lut) => {
      const existing = find(
        lut.values(),
        (notification) => notification.kind === "thread" && notification.threadId === newComment.threadId
      );
      if (!existing) return false;
      lut.set(existing.id, {
        ...existing,
        notifiedAt: newComment.createdAt,
        readAt: newComment.createdAt
      });
      return true;
    });
  }
  function upsert(notification) {
    signal.mutate((lut) => {
      lut.set(notification.id, notification);
    });
  }
  return {
    signal: signal.asReadonly(),
    // Mutations
    markAllRead,
    markRead,
    delete: deleteOne,
    applyDelta,
    clear,
    updateAssociatedNotification,
    upsert
  };
}
function createStore_forRoomNotificationSettings(updates) {
  const baseSignal = new (0, _core.MutableSignal)(/* @__PURE__ */ new Map());
  function update(roomId, settings) {
    baseSignal.mutate((lut) => {
      lut.set(roomId, settings);
    });
  }
  return {
    signal: _core.DerivedSignal.from(
      baseSignal,
      updates,
      (base, updates2) => applyOptimisticUpdates_forSettings(base, updates2)
    ),
    // Mutations
    update
  };
}
function createStore_forHistoryVersions() {
  const baseSignal = new (0, _core.MutableSignal)(
    new (0, _core.DefaultMap)(() => /* @__PURE__ */ new Map())
  );
  function update(roomId, versions) {
    baseSignal.mutate((lut) => {
      const versionsById = lut.getOrCreate(roomId);
      for (const version of versions) {
        versionsById.set(version.id, version);
      }
    });
  }
  return {
    signal: _core.DerivedSignal.from(
      baseSignal,
      (hv) => Object.fromEntries(
        [...hv].map(([roomId, versions]) => [
          roomId,
          Object.fromEntries(versions)
        ])
      )
    ),
    // Mutations
    update
  };
}
function createStore_forPermissionHints() {
  const signal = new (0, _core.MutableSignal)(
    new (0, _core.DefaultMap)(() => /* @__PURE__ */ new Set())
  );
  function update(newHints) {
    signal.mutate((lut) => {
      for (const [roomId, newPermissions] of Object.entries(newHints)) {
        const existing = lut.getOrCreate(roomId);
        for (const permission of newPermissions) {
          existing.add(permission);
        }
      }
    });
  }
  return {
    signal: signal.asReadonly(),
    // Mutations
    update
  };
}
function createStore_forOptimistic(client) {
  const signal = new (0, _core.Signal)([]);
  const syncSource = client[_core.kInternal].createSyncSource();
  signal.subscribe(
    () => syncSource.setSyncStatus(
      signal.get().length > 0 ? "synchronizing" : "synchronized"
    )
  );
  function add(optimisticUpdate) {
    const id = _core.nanoid.call(void 0, );
    const newUpdate = { ...optimisticUpdate, id };
    signal.set((state) => [...state, newUpdate]);
    return id;
  }
  function remove(optimisticId) {
    signal.set((state) => state.filter((ou) => ou.id !== optimisticId));
  }
  return {
    signal: signal.asReadonly(),
    // Mutations
    add,
    remove
  };
}
var UmbrellaStore = class {
  #client;
  //
  // Internally, the UmbrellaStore keeps track of a few source signals that can
  // be set and mutated individually. When any of those are mutated then the
  // clean "external state" is recomputed.
  //
  //   Mutate inputs...                                             ...observe clean/consistent output!
  //
  //            .-> Base ThreadDB ---------+                 +----> Clean threads by ID       (Part 1)
  //           /                           |                 |
  //   mutate ----> Base Notifications --+ |                 | +--> Clean notifications       (Part 1)
  //          \                          | |                 | |    & notifications by ID
  //         | \                         | |      Apply      | |
  //         |   `-> OptimisticUpdates --+--+--> Optimistic --+-+--> Notification Settings    (Part 2)
  //          \                          |        Updates       |
  //           `------- etc etc ---------+                      +--> History Versions         (Part 3)
  //                       ^
  //                       |
  //                       |                        ^                  ^
  //                    Signal                      |                  |
  //                      or                   DerivedSignal      DerivedSignals
  //                  MutableSignal
  //
  //
  // Input signals.
  // (Can be mutated directly.)
  //
  // XXX_vincent Now that we have createStore_forX, we should probably also change
  // `threads` to this pattern, ie create a createStore_forThreads helper as
  // well. It almost works like that already anyway!
  
  // Exposes its signal under `.signal` prop
  
  
  // prettier-ignore
  
  
  
  //
  // Output signals.
  // (Readonly, clean, consistent. With optimistic updates applied.)
  //
  // Note that the output of threadifications signal is the same as the ones for
  // threads and notifications separately, but the threadifications signal will
  // be updated whenever either of them change.
  //
  
  // Notifications
  #notificationsLastRequestedAt = null;
  // Keeps track of when we successfully requested an inbox notifications update for the last time. Will be `null` as long as the first successful fetch hasn't happened yet.
  #notificationsPaginationState;
  // Room Threads
  #roomThreadsLastRequestedAtByRoom = /* @__PURE__ */ new Map();
  // User Threads
  #userThreadsLastRequestedAt = null;
  // Room versions
  #roomVersionsLastRequestedAtByRoom = /* @__PURE__ */ new Map();
  constructor(client) {
    this.#client = client[_core.kInternal].as();
    this.optimisticUpdates = createStore_forOptimistic(this.#client);
    this.permissionHints = createStore_forPermissionHints();
    this.#notificationsPaginationState = new PaginatedResource(
      async (cursor) => {
        const result = await this.#client.getInboxNotifications({ cursor });
        this.updateThreadifications(result.threads, result.inboxNotifications);
        if (this.#notificationsLastRequestedAt === null) {
          this.#notificationsLastRequestedAt = result.requestedAt;
        }
        const nextCursor = result.nextCursor;
        return nextCursor;
      }
    );
    this.threads = new ThreadDB();
    this.notifications = createStore_forNotifications();
    this.roomNotificationSettings = createStore_forRoomNotificationSettings(
      this.optimisticUpdates.signal
    );
    this.historyVersions = createStore_forHistoryVersions();
    const threadifications = _core.DerivedSignal.from(
      this.threads.signal,
      this.notifications.signal,
      this.optimisticUpdates.signal,
      (ts, ns, updates) => applyOptimisticUpdates_forThreadifications(ts, ns, updates)
    );
    const threads = _core.DerivedSignal.from(threadifications, (s) => s.threadsDB);
    const notifications = _core.DerivedSignal.from(
      threadifications,
      (s) => ({
        sortedNotifications: s.sortedNotifications,
        notificationsById: s.notificationsById
      }),
      _core.shallow
    );
    const loadingUserThreads = new (0, _core.DefaultMap)(
      (queryKey) => {
        const query = JSON.parse(queryKey);
        const resource = new PaginatedResource(async (cursor) => {
          const result = await this.#client[_core.kInternal].httpClient.getUserThreads_experimental({
            cursor,
            query
          });
          this.updateThreadifications(
            result.threads,
            result.inboxNotifications
          );
          this.permissionHints.update(result.permissionHints);
          if (this.#userThreadsLastRequestedAt === null) {
            this.#userThreadsLastRequestedAt = result.requestedAt;
          }
          return result.nextCursor;
        });
        const signal = _core.DerivedSignal.from(() => {
          const result = resource.get();
          if (result.isLoading || result.error) {
            return result;
          }
          const threads2 = this.outputs.threads.get().findMany(
            void 0,
            // Do _not_ filter by roomId
            _nullishCoalesce(query, () => ( {})),
            "desc"
          );
          const page = result.data;
          return {
            isLoading: false,
            threads: threads2,
            hasFetchedAll: page.hasFetchedAll,
            isFetchingMore: page.isFetchingMore,
            fetchMoreError: page.fetchMoreError,
            fetchMore: page.fetchMore
          };
        }, shallow2);
        return { signal, waitUntilLoaded: resource.waitUntilLoaded };
      }
    );
    const loadingRoomThreads = new (0, _core.DefaultMap)(
      (queryKey) => {
        const [roomId, query] = JSON.parse(queryKey);
        const resource = new PaginatedResource(async (cursor) => {
          const result = await this.#client[_core.kInternal].httpClient.getThreads({
            roomId,
            cursor,
            query
          });
          this.updateThreadifications(
            result.threads,
            result.inboxNotifications
          );
          this.permissionHints.update(result.permissionHints);
          const lastRequestedAt = this.#roomThreadsLastRequestedAtByRoom.get(roomId);
          if (lastRequestedAt === void 0 || lastRequestedAt > result.requestedAt) {
            this.#roomThreadsLastRequestedAtByRoom.set(
              roomId,
              result.requestedAt
            );
          }
          return result.nextCursor;
        });
        const signal = _core.DerivedSignal.from(() => {
          const result = resource.get();
          if (result.isLoading || result.error) {
            return result;
          }
          const threads2 = this.outputs.threads.get().findMany(roomId, _nullishCoalesce(query, () => ( {})), "asc");
          const page = result.data;
          return {
            isLoading: false,
            threads: threads2,
            hasFetchedAll: page.hasFetchedAll,
            isFetchingMore: page.isFetchingMore,
            fetchMoreError: page.fetchMoreError,
            fetchMore: page.fetchMore
          };
        }, shallow2);
        return { signal, waitUntilLoaded: resource.waitUntilLoaded };
      }
    );
    const loadingNotifications = {
      signal: _core.DerivedSignal.from(() => {
        const resource = this.#notificationsPaginationState;
        const result = resource.get();
        if (result.isLoading || result.error) {
          return result;
        }
        const page = result.data;
        return {
          isLoading: false,
          inboxNotifications: this.outputs.notifications.get().sortedNotifications,
          hasFetchedAll: page.hasFetchedAll,
          isFetchingMore: page.isFetchingMore,
          fetchMoreError: page.fetchMoreError,
          fetchMore: page.fetchMore
        };
      }),
      waitUntilLoaded: this.#notificationsPaginationState.waitUntilLoaded
    };
    const settingsByRoomId = new (0, _core.DefaultMap)((roomId) => {
      const resource = new SinglePageResource(async () => {
        const room = this.#client.getRoom(roomId);
        if (room === null) {
          throw new Error(`Room '${roomId}' is not available on client`);
        }
        const result = await room.getNotificationSettings();
        this.roomNotificationSettings.update(roomId, result);
      });
      const signal = _core.DerivedSignal.from(() => {
        const result = resource.get();
        if (result.isLoading || result.error) {
          return result;
        } else {
          return ASYNC_OK(
            "settings",
            _core.nn.call(void 0, this.roomNotificationSettings.signal.get()[roomId])
          );
        }
      }, _core.shallow);
      return { signal, waitUntilLoaded: resource.waitUntilLoaded };
    });
    const versionsByRoomId = new (0, _core.DefaultMap)(
      (roomId) => {
        const resource = new SinglePageResource(async () => {
          const room = this.#client.getRoom(roomId);
          if (room === null) {
            throw new Error(`Room '${roomId}' is not available on client`);
          }
          const result = await room[_core.kInternal].listTextVersions();
          this.historyVersions.update(roomId, result.versions);
          const lastRequestedAt = this.#roomVersionsLastRequestedAtByRoom.get(roomId);
          if (lastRequestedAt === void 0 || lastRequestedAt > result.requestedAt) {
            this.#roomVersionsLastRequestedAtByRoom.set(
              roomId,
              result.requestedAt
            );
          }
        });
        const signal = _core.DerivedSignal.from(() => {
          const result = resource.get();
          if (result.isLoading || result.error) {
            return result;
          } else {
            return ASYNC_OK(
              "versions",
              Object.values(_nullishCoalesce(this.historyVersions.signal.get()[roomId], () => ( {})))
            );
          }
        }, _core.shallow);
        return { signal, waitUntilLoaded: resource.waitUntilLoaded };
      }
    );
    this.outputs = {
      threadifications,
      threads,
      loadingRoomThreads,
      loadingUserThreads,
      notifications,
      loadingNotifications,
      settingsByRoomId,
      versionsByRoomId
    };
    autobind(this);
  }
  /**
   * Updates an existing inbox notification with a new value, replacing the
   * corresponding optimistic update.
   *
   * This will not update anything if the inbox notification ID isn't found.
   */
  markInboxNotificationRead(inboxNotificationId, readAt, optimisticId) {
    _core.batch.call(void 0, () => {
      this.optimisticUpdates.remove(optimisticId);
      this.notifications.markRead(inboxNotificationId, readAt);
    });
  }
  markAllInboxNotificationsRead(optimisticId, readAt) {
    _core.batch.call(void 0, () => {
      this.optimisticUpdates.remove(optimisticId);
      this.notifications.markAllRead(readAt);
    });
  }
  /**
   * Deletes an existing inbox notification, replacing the corresponding
   * optimistic update.
   */
  deleteInboxNotification(inboxNotificationId, optimisticId) {
    _core.batch.call(void 0, () => {
      this.optimisticUpdates.remove(optimisticId);
      this.notifications.delete(inboxNotificationId);
    });
  }
  /**
   * Deletes *all* inbox notifications, replacing the corresponding optimistic
   * update.
   */
  deleteAllInboxNotifications(optimisticId) {
    _core.batch.call(void 0, () => {
      this.optimisticUpdates.remove(optimisticId);
      this.notifications.clear();
    });
  }
  /**
   * Creates an new thread, replacing the corresponding optimistic update.
   */
  createThread(optimisticId, thread) {
    _core.batch.call(void 0, () => {
      this.optimisticUpdates.remove(optimisticId);
      this.threads.upsert(thread);
    });
  }
  /**
   * Updates an existing thread with a new value, replacing the corresponding
   * optimistic update.
   *
   * This will not update anything if:
   * - The thread ID isn't found; or
   * - The thread ID was already deleted; or
   * - The thread ID was updated more recently than the optimistic update's
   *   timestamp (if given)
   */
  #updateThread(threadId, optimisticId, callback, updatedAt) {
    _core.batch.call(void 0, () => {
      if (optimisticId !== null) {
        this.optimisticUpdates.remove(optimisticId);
      }
      const db = this.threads;
      const existing = db.get(threadId);
      if (!existing) return;
      if (!!updatedAt && existing.updatedAt > updatedAt) return;
      db.upsert(callback(existing));
    });
  }
  patchThread(threadId, optimisticId, patch, updatedAt) {
    return this.#updateThread(
      threadId,
      optimisticId,
      (thread) => ({ ...thread, ..._core.compactObject.call(void 0, patch) }),
      updatedAt
    );
  }
  addReaction(threadId, optimisticId, commentId, reaction, createdAt) {
    this.#updateThread(
      threadId,
      optimisticId,
      (thread) => applyAddReaction(thread, commentId, reaction),
      createdAt
    );
  }
  removeReaction(threadId, optimisticId, commentId, emoji, userId, removedAt) {
    this.#updateThread(
      threadId,
      optimisticId,
      (thread) => applyRemoveReaction(thread, commentId, emoji, userId, removedAt),
      removedAt
    );
  }
  /**
   * Soft-deletes an existing thread by setting its `deletedAt` value,
   * replacing the corresponding optimistic update.
   *
   * This will not update anything if:
   * - The thread ID isn't found; or
   * - The thread ID was already deleted
   */
  deleteThread(threadId, optimisticId) {
    return this.#updateThread(
      threadId,
      optimisticId,
      // A deletion is actually an update of the deletedAt property internally
      (thread) => ({ ...thread, updatedAt: /* @__PURE__ */ new Date(), deletedAt: /* @__PURE__ */ new Date() })
    );
  }
  /**
   * Creates an existing comment and ensures the associated notification is
   * updated correctly, replacing the corresponding optimistic update.
   */
  createComment(newComment, optimisticId) {
    _core.batch.call(void 0, () => {
      this.optimisticUpdates.remove(optimisticId);
      const existingThread = this.threads.get(newComment.threadId);
      if (!existingThread) {
        return;
      }
      this.threads.upsert(applyUpsertComment(existingThread, newComment));
      this.notifications.updateAssociatedNotification(newComment);
    });
  }
  editComment(threadId, optimisticId, editedComment) {
    return this.#updateThread(
      threadId,
      optimisticId,
      (thread) => applyUpsertComment(thread, editedComment)
    );
  }
  deleteComment(threadId, optimisticId, commentId, deletedAt) {
    return this.#updateThread(
      threadId,
      optimisticId,
      (thread) => applyDeleteComment(thread, commentId, deletedAt),
      deletedAt
    );
  }
  updateThreadifications(threads, notifications, deletedThreads = [], deletedNotifications = []) {
    _core.batch.call(void 0, () => {
      this.threads.applyDelta(threads, deletedThreads);
      this.notifications.applyDelta(notifications, deletedNotifications);
    });
  }
  /**
   * Updates existing notification setting for a room with a new value,
   * replacing the corresponding optimistic update.
   */
  updateRoomNotificationSettings(roomId, optimisticId, settings) {
    _core.batch.call(void 0, () => {
      this.optimisticUpdates.remove(optimisticId);
      this.roomNotificationSettings.update(roomId, settings);
    });
  }
  async fetchNotificationsDeltaUpdate(signal) {
    const lastRequestedAt = this.#notificationsLastRequestedAt;
    if (lastRequestedAt === null) {
      return;
    }
    const result = await this.#client.getInboxNotificationsSince({
      since: lastRequestedAt,
      signal
    });
    if (lastRequestedAt < result.requestedAt) {
      this.#notificationsLastRequestedAt = result.requestedAt;
    }
    this.updateThreadifications(
      result.threads.updated,
      result.inboxNotifications.updated,
      result.threads.deleted,
      result.inboxNotifications.deleted
    );
  }
  async fetchRoomThreadsDeltaUpdate(roomId, signal) {
    const lastRequestedAt = this.#roomThreadsLastRequestedAtByRoom.get(roomId);
    if (lastRequestedAt === void 0) {
      return;
    }
    const updates = await this.#client[_core.kInternal].httpClient.getThreadsSince({
      roomId,
      since: lastRequestedAt,
      signal
    });
    this.updateThreadifications(
      updates.threads.updated,
      updates.inboxNotifications.updated,
      updates.threads.deleted,
      updates.inboxNotifications.deleted
    );
    this.permissionHints.update(updates.permissionHints);
    if (lastRequestedAt < updates.requestedAt) {
      this.#roomThreadsLastRequestedAtByRoom.set(roomId, updates.requestedAt);
    }
  }
  async fetchUserThreadsDeltaUpdate(signal) {
    const lastRequestedAt = this.#userThreadsLastRequestedAt;
    if (lastRequestedAt === null) {
      return;
    }
    const result = await this.#client[_core.kInternal].httpClient.getUserThreadsSince_experimental({
      since: lastRequestedAt,
      signal
    });
    if (lastRequestedAt < result.requestedAt) {
      this.#notificationsLastRequestedAt = result.requestedAt;
    }
    this.updateThreadifications(
      result.threads.updated,
      result.inboxNotifications.updated,
      result.threads.deleted,
      result.inboxNotifications.deleted
    );
    this.permissionHints.update(result.permissionHints);
  }
  async fetchRoomVersionsDeltaUpdate(roomId, signal) {
    const lastRequestedAt = this.#roomVersionsLastRequestedAtByRoom.get(roomId);
    if (lastRequestedAt === void 0) {
      return;
    }
    const room = _core.nn.call(void 0, 
      this.#client.getRoom(roomId),
      `Room with id ${roomId} is not available on client`
    );
    const updates = await room[_core.kInternal].listTextVersionsSince({
      since: lastRequestedAt,
      signal
    });
    this.historyVersions.update(roomId, updates.versions);
    if (lastRequestedAt < updates.requestedAt) {
      this.#roomVersionsLastRequestedAtByRoom.set(roomId, updates.requestedAt);
    }
  }
  async refreshRoomNotificationSettings(roomId, signal) {
    const room = _core.nn.call(void 0, 
      this.#client.getRoom(roomId),
      `Room with id ${roomId} is not available on client`
    );
    const result = await room.getNotificationSettings({ signal });
    this.roomNotificationSettings.update(roomId, result);
  }
};
function applyOptimisticUpdates_forThreadifications(baseThreadsDB, notificationsLUT, optimisticUpdates) {
  const threadsDB = baseThreadsDB.clone();
  let notificationsById = Object.fromEntries(notificationsLUT);
  for (const optimisticUpdate of optimisticUpdates) {
    switch (optimisticUpdate.type) {
      case "create-thread": {
        threadsDB.upsert(optimisticUpdate.thread);
        break;
      }
      case "edit-thread-metadata": {
        const thread = threadsDB.get(optimisticUpdate.threadId);
        if (thread === void 0) break;
        if (thread.updatedAt > optimisticUpdate.updatedAt) {
          break;
        }
        threadsDB.upsert({
          ...thread,
          updatedAt: optimisticUpdate.updatedAt,
          metadata: {
            ...thread.metadata,
            ...optimisticUpdate.metadata
          }
        });
        break;
      }
      case "mark-thread-as-resolved": {
        const thread = threadsDB.get(optimisticUpdate.threadId);
        if (thread === void 0) break;
        threadsDB.upsert({ ...thread, resolved: true });
        break;
      }
      case "mark-thread-as-unresolved": {
        const thread = threadsDB.get(optimisticUpdate.threadId);
        if (thread === void 0) break;
        threadsDB.upsert({ ...thread, resolved: false });
        break;
      }
      case "create-comment": {
        const thread = threadsDB.get(optimisticUpdate.comment.threadId);
        if (thread === void 0) break;
        threadsDB.upsert(applyUpsertComment(thread, optimisticUpdate.comment));
        const inboxNotification = Object.values(notificationsById).find(
          (notification) => notification.kind === "thread" && notification.threadId === thread.id
        );
        if (inboxNotification === void 0) {
          break;
        }
        notificationsById[inboxNotification.id] = {
          ...inboxNotification,
          notifiedAt: optimisticUpdate.comment.createdAt,
          readAt: optimisticUpdate.comment.createdAt
        };
        break;
      }
      case "edit-comment": {
        const thread = threadsDB.get(optimisticUpdate.comment.threadId);
        if (thread === void 0) break;
        threadsDB.upsert(applyUpsertComment(thread, optimisticUpdate.comment));
        break;
      }
      case "delete-comment": {
        const thread = threadsDB.get(optimisticUpdate.threadId);
        if (thread === void 0) break;
        threadsDB.upsert(
          applyDeleteComment(
            thread,
            optimisticUpdate.commentId,
            optimisticUpdate.deletedAt
          )
        );
        break;
      }
      case "delete-thread": {
        const thread = threadsDB.get(optimisticUpdate.threadId);
        if (thread === void 0) break;
        threadsDB.upsert({
          ...thread,
          deletedAt: optimisticUpdate.deletedAt,
          updatedAt: optimisticUpdate.deletedAt,
          comments: []
        });
        break;
      }
      case "add-reaction": {
        const thread = threadsDB.get(optimisticUpdate.threadId);
        if (thread === void 0) break;
        threadsDB.upsert(
          applyAddReaction(
            thread,
            optimisticUpdate.commentId,
            optimisticUpdate.reaction
          )
        );
        break;
      }
      case "remove-reaction": {
        const thread = threadsDB.get(optimisticUpdate.threadId);
        if (thread === void 0) break;
        threadsDB.upsert(
          applyRemoveReaction(
            thread,
            optimisticUpdate.commentId,
            optimisticUpdate.emoji,
            optimisticUpdate.userId,
            optimisticUpdate.removedAt
          )
        );
        break;
      }
      case "mark-inbox-notification-as-read": {
        const ibn = notificationsById[optimisticUpdate.inboxNotificationId];
        if (ibn === void 0) {
          break;
        }
        notificationsById[optimisticUpdate.inboxNotificationId] = {
          ...ibn,
          readAt: optimisticUpdate.readAt
        };
        break;
      }
      case "mark-all-inbox-notifications-as-read": {
        for (const id in notificationsById) {
          const ibn = notificationsById[id];
          if (ibn === void 0) {
            break;
          }
          notificationsById[id] = {
            ...ibn,
            readAt: optimisticUpdate.readAt
          };
        }
        break;
      }
      case "delete-inbox-notification": {
        delete notificationsById[optimisticUpdate.inboxNotificationId];
        break;
      }
      case "delete-all-inbox-notifications": {
        notificationsById = {};
        break;
      }
    }
  }
  const sortedNotifications = (
    // Sort so that the most recent notifications are first
    Object.values(notificationsById).filter(
      (ibn) => ibn.kind === "thread" ? threadsDB.get(ibn.threadId) !== void 0 : true
    ).sort((a, b) => b.notifiedAt.getTime() - a.notifiedAt.getTime())
  );
  return {
    sortedNotifications,
    notificationsById,
    threadsDB
  };
}
function applyOptimisticUpdates_forSettings(settingsLUT, optimisticUpdates) {
  const settingsByRoomId = Object.fromEntries(settingsLUT);
  for (const optimisticUpdate of optimisticUpdates) {
    switch (optimisticUpdate.type) {
      case "update-notification-settings": {
        const settings = settingsByRoomId[optimisticUpdate.roomId];
        if (settings === void 0) {
          break;
        }
        settingsByRoomId[optimisticUpdate.roomId] = {
          ...settings,
          ...optimisticUpdate.settings
        };
      }
    }
  }
  return settingsByRoomId;
}
function compareInboxNotifications(inboxNotificationA, inboxNotificationB) {
  if (inboxNotificationA.notifiedAt > inboxNotificationB.notifiedAt) {
    return 1;
  } else if (inboxNotificationA.notifiedAt < inboxNotificationB.notifiedAt) {
    return -1;
  }
  if (inboxNotificationA.readAt && inboxNotificationB.readAt) {
    return inboxNotificationA.readAt > inboxNotificationB.readAt ? 1 : inboxNotificationA.readAt < inboxNotificationB.readAt ? -1 : 0;
  } else if (inboxNotificationA.readAt || inboxNotificationB.readAt) {
    return inboxNotificationA.readAt ? 1 : -1;
  }
  return 0;
}
function applyUpsertComment(thread, comment) {
  if (thread.deletedAt !== void 0) {
    return thread;
  }
  if (comment.threadId !== thread.id) {
    _core.console.warn(
      `Comment ${comment.id} does not belong to thread ${thread.id}`
    );
    return thread;
  }
  const existingComment = thread.comments.find(
    (existingComment2) => existingComment2.id === comment.id
  );
  if (existingComment === void 0) {
    const updatedAt = new Date(
      Math.max(thread.updatedAt.getTime(), comment.createdAt.getTime())
    );
    const updatedThread = {
      ...thread,
      updatedAt,
      comments: [...thread.comments, comment]
    };
    return updatedThread;
  }
  if (existingComment.deletedAt !== void 0) {
    return thread;
  }
  if (existingComment.editedAt === void 0 || comment.editedAt === void 0 || existingComment.editedAt <= comment.editedAt) {
    const updatedComments = thread.comments.map(
      (existingComment2) => existingComment2.id === comment.id ? comment : existingComment2
    );
    const updatedThread = {
      ...thread,
      updatedAt: new Date(
        Math.max(
          thread.updatedAt.getTime(),
          _optionalChain([comment, 'access', _7 => _7.editedAt, 'optionalAccess', _8 => _8.getTime, 'call', _9 => _9()]) || comment.createdAt.getTime()
        )
      ),
      comments: updatedComments
    };
    return updatedThread;
  }
  return thread;
}
function applyDeleteComment(thread, commentId, deletedAt) {
  if (thread.deletedAt !== void 0) {
    return thread;
  }
  const existingComment = thread.comments.find(
    (comment) => comment.id === commentId
  );
  if (existingComment === void 0) {
    return thread;
  }
  if (existingComment.deletedAt !== void 0) {
    return thread;
  }
  const updatedComments = thread.comments.map(
    (comment) => comment.id === commentId ? {
      ...comment,
      deletedAt,
      // We optimistically remove the comment body and attachments when marking it as deleted
      body: void 0,
      attachments: []
    } : comment
  );
  if (updatedComments.every((comment) => comment.deletedAt !== void 0)) {
    return {
      ...thread,
      deletedAt,
      updatedAt: deletedAt
    };
  }
  return {
    ...thread,
    updatedAt: deletedAt,
    comments: updatedComments
  };
}
function applyAddReaction(thread, commentId, reaction) {
  if (thread.deletedAt !== void 0) {
    return thread;
  }
  const existingComment = thread.comments.find(
    (comment) => comment.id === commentId
  );
  if (existingComment === void 0) {
    return thread;
  }
  if (existingComment.deletedAt !== void 0) {
    return thread;
  }
  const updatedComments = thread.comments.map(
    (comment) => comment.id === commentId ? {
      ...comment,
      reactions: upsertReaction(comment.reactions, reaction)
    } : comment
  );
  return {
    ...thread,
    updatedAt: new Date(
      Math.max(reaction.createdAt.getTime(), thread.updatedAt.getTime())
    ),
    comments: updatedComments
  };
}
function applyRemoveReaction(thread, commentId, emoji, userId, removedAt) {
  if (thread.deletedAt !== void 0) {
    return thread;
  }
  const existingComment = thread.comments.find(
    (comment) => comment.id === commentId
  );
  if (existingComment === void 0) {
    return thread;
  }
  if (existingComment.deletedAt !== void 0) {
    return thread;
  }
  const updatedComments = thread.comments.map(
    (comment) => comment.id === commentId ? {
      ...comment,
      reactions: comment.reactions.map(
        (reaction) => reaction.emoji === emoji ? {
          ...reaction,
          users: reaction.users.filter((user) => user.id !== userId)
        } : reaction
      ).filter((reaction) => reaction.users.length > 0)
      // Remove reactions with no users left
    } : comment
  );
  return {
    ...thread,
    updatedAt: new Date(
      Math.max(removedAt.getTime(), thread.updatedAt.getTime())
    ),
    comments: updatedComments
  };
}
function upsertReaction(reactions, reaction) {
  const existingReaction = reactions.find(
    (existingReaction2) => existingReaction2.emoji === reaction.emoji
  );
  if (existingReaction === void 0) {
    return [
      ...reactions,
      {
        emoji: reaction.emoji,
        createdAt: reaction.createdAt,
        users: [{ id: reaction.userId }]
      }
    ];
  }
  if (existingReaction.users.some((user) => user.id === reaction.userId) === false) {
    return reactions.map(
      (existingReaction2) => existingReaction2.emoji === reaction.emoji ? {
        ...existingReaction2,
        users: [...existingReaction2.users, { id: reaction.userId }]
      } : existingReaction2
    );
  }
  return reactions;
}

// src/liveblocks.tsx
var _jsxruntime = require('react/jsx-runtime');
var ClientContext = _react.createContext.call(void 0, null);
function missingUserError(userId) {
  return new Error(`resolveUsers didn't return anything for user '${userId}'`);
}
function missingRoomInfoError(roomId) {
  return new Error(
    `resolveRoomsInfo didn't return anything for room '${roomId}'`
  );
}
function identity2(x) {
  return x;
}
var _umbrellaStores = /* @__PURE__ */ new WeakMap();
var _extras = /* @__PURE__ */ new WeakMap();
var _bundles = /* @__PURE__ */ new WeakMap();
function selectorFor_useUnreadInboxNotificationsCount(result) {
  if (!result.inboxNotifications) {
    return result;
  }
  return ASYNC_OK(
    "count",
    count(
      result.inboxNotifications,
      (n) => n.readAt === null || n.readAt < n.notifiedAt
    )
  );
}
function selectorFor_useUser(state, userId) {
  if (state === void 0 || _optionalChain([state, 'optionalAccess', _10 => _10.isLoading])) {
    return _nullishCoalesce(state, () => ( { isLoading: true }));
  }
  if (state.error) {
    return state;
  }
  if (!state.data) {
    return {
      isLoading: false,
      error: missingUserError(userId)
    };
  }
  return {
    isLoading: false,
    user: state.data
  };
}
function selectorFor_useRoomInfo(state, roomId) {
  if (state === void 0 || _optionalChain([state, 'optionalAccess', _11 => _11.isLoading])) {
    return _nullishCoalesce(state, () => ( { isLoading: true }));
  }
  if (state.error) {
    return state;
  }
  if (!state.data) {
    return {
      isLoading: false,
      error: missingRoomInfoError(roomId)
    };
  }
  return {
    isLoading: false,
    info: state.data
  };
}
function getOrCreateContextBundle(client) {
  let bundle = _bundles.get(client);
  if (!bundle) {
    bundle = makeLiveblocksContextBundle(client);
    _bundles.set(client, bundle);
  }
  return bundle;
}
function getUmbrellaStoreForClient(client) {
  let store = _umbrellaStores.get(client);
  if (!store) {
    store = new UmbrellaStore(client);
    _umbrellaStores.set(client, store);
  }
  return store;
}
function getLiveblocksExtrasForClient(client) {
  let extras = _extras.get(client);
  if (!extras) {
    extras = makeLiveblocksExtrasForClient(client);
    _extras.set(client, extras);
  }
  return extras;
}
function makeLiveblocksExtrasForClient(client) {
  const store = getUmbrellaStoreForClient(client);
  const notificationsPoller = _core.makePoller.call(void 0, 
    async (signal) => {
      try {
        return await store.fetchNotificationsDeltaUpdate(signal);
      } catch (err) {
        console.warn(`Polling new inbox notifications failed: ${String(err)}`);
        throw err;
      }
    },
    config.NOTIFICATIONS_POLL_INTERVAL,
    { maxStaleTimeMs: config.NOTIFICATIONS_MAX_STALE_TIME }
  );
  const userThreadsPoller = _core.makePoller.call(void 0, 
    async (signal) => {
      try {
        return await store.fetchUserThreadsDeltaUpdate(signal);
      } catch (err) {
        console.warn(`Polling new user threads failed: ${String(err)}`);
        throw err;
      }
    },
    config.USER_THREADS_POLL_INTERVAL,
    { maxStaleTimeMs: config.USER_THREADS_MAX_STALE_TIME }
  );
  return {
    store,
    notificationsPoller,
    userThreadsPoller
  };
}
function makeLiveblocksContextBundle(client) {
  const useInboxNotificationThread2 = (inboxNotificationId) => useInboxNotificationThread_withClient(client, inboxNotificationId);
  const useMarkInboxNotificationAsRead2 = () => useMarkInboxNotificationAsRead_withClient(client);
  const useMarkAllInboxNotificationsAsRead2 = () => useMarkAllInboxNotificationsAsRead_withClient(client);
  const useDeleteInboxNotification2 = () => useDeleteInboxNotification_withClient(client);
  const useDeleteAllInboxNotifications2 = () => useDeleteAllInboxNotifications_withClient(client);
  function LiveblocksProvider2(props) {
    useEnsureNoLiveblocksProvider();
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ClientContext.Provider, { value: client, children: props.children });
  }
  const shared = createSharedContext(client);
  const bundle = {
    LiveblocksProvider: LiveblocksProvider2,
    useInboxNotifications: () => useInboxNotifications_withClient(client, identity2, _core.shallow),
    useUnreadInboxNotificationsCount: () => useUnreadInboxNotificationsCount_withClient(client),
    useMarkInboxNotificationAsRead: useMarkInboxNotificationAsRead2,
    useMarkAllInboxNotificationsAsRead: useMarkAllInboxNotificationsAsRead2,
    useDeleteInboxNotification: useDeleteInboxNotification2,
    useDeleteAllInboxNotifications: useDeleteAllInboxNotifications2,
    useInboxNotificationThread: useInboxNotificationThread2,
    useUserThreads_experimental,
    ...shared.classic,
    suspense: {
      LiveblocksProvider: LiveblocksProvider2,
      useInboxNotifications: () => useInboxNotificationsSuspense_withClient(client),
      useUnreadInboxNotificationsCount: () => useUnreadInboxNotificationsCountSuspense_withClient(client),
      useMarkInboxNotificationAsRead: useMarkInboxNotificationAsRead2,
      useMarkAllInboxNotificationsAsRead: useMarkAllInboxNotificationsAsRead2,
      useDeleteInboxNotification: useDeleteInboxNotification2,
      useDeleteAllInboxNotifications: useDeleteAllInboxNotifications2,
      useInboxNotificationThread: useInboxNotificationThread2,
      useUserThreads_experimental: useUserThreadsSuspense_experimental,
      ...shared.suspense
    }
  };
  return bundle;
}
function useInboxNotifications_withClient(client, selector, isEqual) {
  const { store, notificationsPoller: poller } = getLiveblocksExtrasForClient(client);
  _react.useEffect.call(void 0, 
    () => void store.outputs.loadingNotifications.waitUntilLoaded()
    // NOTE: Deliberately *not* using a dependency array here!
    //
    // It is important to call waitUntil on *every* render.
    // This is harmless though, on most renders, except:
    // 1. The very first render, in which case we'll want to trigger the initial page fetch.
    // 2. All other subsequent renders now "just" return the same promise (a quick operation).
    // 3. If ever the promise would fail, then after 5 seconds it would reset, and on the very
    //    *next* render after that, a *new* fetch/promise will get created.
  );
  _react.useEffect.call(void 0, () => {
    poller.inc();
    poller.pollNowIfStale();
    return () => {
      poller.dec();
    };
  }, [poller]);
  return useSignal(
    store.outputs.loadingNotifications.signal,
    selector,
    isEqual
  );
}
function useInboxNotificationsSuspense_withClient(client) {
  ensureNotServerSide();
  const store = getLiveblocksExtrasForClient(client).store;
  use(store.outputs.loadingNotifications.waitUntilLoaded());
  const result = useInboxNotifications_withClient(client, identity2, _core.shallow);
  _core.assert.call(void 0, !result.error, "Did not expect error");
  _core.assert.call(void 0, !result.isLoading, "Did not expect loading");
  return result;
}
function useUnreadInboxNotificationsCount_withClient(client) {
  return useInboxNotifications_withClient(
    client,
    selectorFor_useUnreadInboxNotificationsCount,
    _core.shallow
  );
}
function useUnreadInboxNotificationsCountSuspense_withClient(client) {
  ensureNotServerSide();
  const store = getLiveblocksExtrasForClient(client).store;
  use(store.outputs.loadingNotifications.waitUntilLoaded());
  const result = useUnreadInboxNotificationsCount_withClient(client);
  _core.assert.call(void 0, !result.isLoading, "Did not expect loading");
  _core.assert.call(void 0, !result.error, "Did not expect error");
  return result;
}
function useMarkInboxNotificationAsRead_withClient(client) {
  return _react.useCallback.call(void 0, 
    (inboxNotificationId) => {
      const { store } = getLiveblocksExtrasForClient(client);
      const readAt = /* @__PURE__ */ new Date();
      const optimisticId = store.optimisticUpdates.add({
        type: "mark-inbox-notification-as-read",
        inboxNotificationId,
        readAt
      });
      client.markInboxNotificationAsRead(inboxNotificationId).then(
        () => {
          store.markInboxNotificationRead(
            inboxNotificationId,
            readAt,
            optimisticId
          );
        },
        (err) => {
          store.optimisticUpdates.remove(optimisticId);
          client[_core.kInternal].emitError(
            {
              type: "MARK_INBOX_NOTIFICATION_AS_READ_ERROR",
              inboxNotificationId
            },
            err
          );
        }
      );
    },
    [client]
  );
}
function useMarkAllInboxNotificationsAsRead_withClient(client) {
  return _react.useCallback.call(void 0, () => {
    const { store } = getLiveblocksExtrasForClient(client);
    const readAt = /* @__PURE__ */ new Date();
    const optimisticId = store.optimisticUpdates.add({
      type: "mark-all-inbox-notifications-as-read",
      readAt
    });
    client.markAllInboxNotificationsAsRead().then(
      () => {
        store.markAllInboxNotificationsRead(optimisticId, readAt);
      },
      (err) => {
        store.optimisticUpdates.remove(optimisticId);
        client[_core.kInternal].emitError(
          // No roomId, threadId, commentId to include for this error
          { type: "MARK_ALL_INBOX_NOTIFICATIONS_AS_READ_ERROR" },
          err
        );
      }
    );
  }, [client]);
}
function useDeleteInboxNotification_withClient(client) {
  return _react.useCallback.call(void 0, 
    (inboxNotificationId) => {
      const { store } = getLiveblocksExtrasForClient(client);
      const deletedAt = /* @__PURE__ */ new Date();
      const optimisticId = store.optimisticUpdates.add({
        type: "delete-inbox-notification",
        inboxNotificationId,
        deletedAt
      });
      client.deleteInboxNotification(inboxNotificationId).then(
        () => {
          store.deleteInboxNotification(inboxNotificationId, optimisticId);
        },
        (err) => {
          store.optimisticUpdates.remove(optimisticId);
          client[_core.kInternal].emitError(
            { type: "DELETE_INBOX_NOTIFICATION_ERROR", inboxNotificationId },
            err
          );
        }
      );
    },
    [client]
  );
}
function useDeleteAllInboxNotifications_withClient(client) {
  return _react.useCallback.call(void 0, () => {
    const { store } = getLiveblocksExtrasForClient(client);
    const deletedAt = /* @__PURE__ */ new Date();
    const optimisticId = store.optimisticUpdates.add({
      type: "delete-all-inbox-notifications",
      deletedAt
    });
    client.deleteAllInboxNotifications().then(
      () => {
        store.deleteAllInboxNotifications(optimisticId);
      },
      (err) => {
        store.optimisticUpdates.remove(optimisticId);
        client[_core.kInternal].emitError(
          { type: "DELETE_ALL_INBOX_NOTIFICATIONS_ERROR" },
          err
        );
      }
    );
  }, [client]);
}
function useInboxNotificationThread_withClient(client, inboxNotificationId) {
  const { store } = getLiveblocksExtrasForClient(client);
  return useSignal(
    store.outputs.threadifications,
    _react.useCallback.call(void 0, 
      (state) => {
        const inboxNotification = _nullishCoalesce(state.notificationsById[inboxNotificationId], () => ( _core.raise.call(void 0, 
          `Inbox notification with ID "${inboxNotificationId}" not found`
        )));
        if (inboxNotification.kind !== "thread") {
          _core.raise.call(void 0, 
            `Inbox notification with ID "${inboxNotificationId}" is not of kind "thread"`
          );
        }
        const thread = _nullishCoalesce(state.threadsDB.get(inboxNotification.threadId), () => ( _core.raise.call(void 0, 
          `Thread with ID "${inboxNotification.threadId}" not found, this inbox notification might not be of kind "thread"`
        )));
        return thread;
      },
      [inboxNotificationId]
    )
  );
}
function useUser_withClient(client, userId) {
  const usersStore = client[_core.kInternal].usersStore;
  const getUserState = _react.useCallback.call(void 0, 
    () => usersStore.getItemState(userId),
    [usersStore, userId]
  );
  const selector = _react.useCallback.call(void 0, 
    (state) => selectorFor_useUser(state, userId),
    [userId]
  );
  const result = useSyncExternalStoreWithSelector(
    usersStore.subscribe,
    getUserState,
    getUserState,
    selector,
    _core.shallow
  );
  _react.useEffect.call(void 0, 
    () => void usersStore.enqueue(userId)
    // NOTE: Deliberately *not* using a dependency array here!
    //
    // It is important to call usersStore.enqueue on *every* render.
    // This is harmless though, on most renders, except:
    // 1. The very first render, in which case we'll want to trigger evaluation
    //    of the userId.
    // 2. All other subsequent renders now are a no-op (from the implementation
    //    of .enqueue)
    // 3. If ever the userId gets invalidated, the user would be fetched again.
  );
  return result;
}
function useUserSuspense_withClient(client, userId) {
  const usersStore = client[_core.kInternal].usersStore;
  const getUserState = _react.useCallback.call(void 0, 
    () => usersStore.getItemState(userId),
    [usersStore, userId]
  );
  const userState = getUserState();
  if (!userState || userState.isLoading) {
    throw usersStore.enqueue(userId);
  }
  if (userState.error) {
    throw userState.error;
  }
  if (!userState.data) {
    throw missingUserError(userId);
  }
  const state = _react.useSyncExternalStore.call(void 0, 
    usersStore.subscribe,
    getUserState,
    getUserState
  );
  _core.assert.call(void 0, state !== void 0, "Unexpected missing state");
  _core.assert.call(void 0, !state.isLoading, "Unexpected loading state");
  _core.assert.call(void 0, !state.error, "Unexpected error state");
  return {
    isLoading: false,
    user: state.data,
    error: void 0
  };
}
function useRoomInfo_withClient(client, roomId) {
  const roomsInfoStore = client[_core.kInternal].roomsInfoStore;
  const getRoomInfoState = _react.useCallback.call(void 0, 
    () => roomsInfoStore.getItemState(roomId),
    [roomsInfoStore, roomId]
  );
  const selector = _react.useCallback.call(void 0, 
    (state) => selectorFor_useRoomInfo(state, roomId),
    [roomId]
  );
  const result = useSyncExternalStoreWithSelector(
    roomsInfoStore.subscribe,
    getRoomInfoState,
    getRoomInfoState,
    selector,
    _core.shallow
  );
  _react.useEffect.call(void 0, 
    () => void roomsInfoStore.enqueue(roomId)
    // NOTE: Deliberately *not* using a dependency array here!
    //
    // It is important to call roomsInfoStore.enqueue on *every* render.
    // This is harmless though, on most renders, except:
    // 1. The very first render, in which case we'll want to trigger evaluation
    //    of the roomId.
    // 2. All other subsequent renders now are a no-op (from the implementation
    //    of .enqueue)
    // 3. If ever the roomId gets invalidated, the room info would be fetched again.
  );
  return result;
}
function useRoomInfoSuspense_withClient(client, roomId) {
  const roomsInfoStore = client[_core.kInternal].roomsInfoStore;
  const getRoomInfoState = _react.useCallback.call(void 0, 
    () => roomsInfoStore.getItemState(roomId),
    [roomsInfoStore, roomId]
  );
  const roomInfoState = getRoomInfoState();
  if (!roomInfoState || roomInfoState.isLoading) {
    throw roomsInfoStore.enqueue(roomId);
  }
  if (roomInfoState.error) {
    throw roomInfoState.error;
  }
  if (!roomInfoState.data) {
    throw missingRoomInfoError(roomId);
  }
  const state = _react.useSyncExternalStore.call(void 0, 
    roomsInfoStore.subscribe,
    getRoomInfoState,
    getRoomInfoState
  );
  _core.assert.call(void 0, state !== void 0, "Unexpected missing state");
  _core.assert.call(void 0, !state.isLoading, "Unexpected loading state");
  _core.assert.call(void 0, !state.error, "Unexpected error state");
  _core.assert.call(void 0, state.data !== void 0, "Unexpected missing room info data");
  return {
    isLoading: false,
    info: state.data,
    error: void 0
  };
}
function createSharedContext(client) {
  const useClient2 = () => client;
  function useSyncStatus2(options) {
    return useSyncStatus_withClient(client, options);
  }
  return {
    classic: {
      useClient: useClient2,
      useUser: (userId) => useUser_withClient(client, userId),
      useRoomInfo: (roomId) => useRoomInfo_withClient(client, roomId),
      useIsInsideRoom,
      useErrorListener,
      useSyncStatus: useSyncStatus2
    },
    suspense: {
      useClient: useClient2,
      useUser: (userId) => useUserSuspense_withClient(client, userId),
      useRoomInfo: (roomId) => useRoomInfoSuspense_withClient(client, roomId),
      useIsInsideRoom,
      useErrorListener,
      useSyncStatus: useSyncStatus2
    }
  };
}
function useEnsureNoLiveblocksProvider(options) {
  const existing = useClientOrNull();
  if (!_optionalChain([options, 'optionalAccess', _12 => _12.allowNesting]) && existing !== null) {
    throw new Error(
      "You cannot nest multiple LiveblocksProvider instances in the same React tree."
    );
  }
}
function useClientOrNull() {
  return _react.useContext.call(void 0, ClientContext);
}
function useClient() {
  return _nullishCoalesce(useClientOrNull(), () => ( _core.raise.call(void 0, "LiveblocksProvider is missing from the React tree.")));
}
function LiveblocksProviderWithClient(props) {
  useEnsureNoLiveblocksProvider(props);
  return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ClientContext.Provider, { value: props.client, children: props.children });
}
function LiveblocksProvider(props) {
  const { children, ...o } = props;
  const options = {
    publicApiKey: useInitial(o.publicApiKey),
    throttle: useInitial(o.throttle),
    lostConnectionTimeout: useInitial(o.lostConnectionTimeout),
    backgroundKeepAliveTimeout: useInitial(o.backgroundKeepAliveTimeout),
    polyfills: useInitial(o.polyfills),
    largeMessageStrategy: useInitial(o.largeMessageStrategy),
    unstable_fallbackToHTTP: useInitial(o.unstable_fallbackToHTTP),
    unstable_streamData: useInitial(o.unstable_streamData),
    preventUnsavedChanges: useInitial(o.preventUnsavedChanges),
    authEndpoint: useInitialUnlessFunction(o.authEndpoint),
    resolveMentionSuggestions: useInitialUnlessFunction(
      o.resolveMentionSuggestions
    ),
    resolveUsers: useInitialUnlessFunction(o.resolveUsers),
    resolveRoomsInfo: useInitialUnlessFunction(o.resolveRoomsInfo),
    baseUrl: useInitial(
      // @ts-expect-error - Hidden config options
      o.baseUrl
    ),
    enableDebugLogging: useInitial(
      // @ts-expect-error - Hidden config options
      o.enableDebugLogging
    )
  };
  const client = _react.useMemo.call(void 0, () => _core.createClient.call(void 0, options), []);
  return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, LiveblocksProviderWithClient, { client, children });
}
function createLiveblocksContext(client) {
  return getOrCreateContextBundle(client);
}
function useUserThreads_experimental(options = {}) {
  const client = useClient();
  const { store, userThreadsPoller: poller } = getLiveblocksExtrasForClient(client);
  const queryKey = makeUserThreadsQueryKey(options.query);
  _react.useEffect.call(void 0, 
    () => void store.outputs.loadingUserThreads.getOrCreate(queryKey).waitUntilLoaded()
    // NOTE: Deliberately *not* using a dependency array here!
    //
    // It is important to call waitUntil on *every* render.
    // This is harmless though, on most renders, except:
    // 1. The very first render, in which case we'll want to trigger the initial page fetch.
    // 2. All other subsequent renders now "just" return the same promise (a quick operation).
    // 3. If ever the promise would fail, then after 5 seconds it would reset, and on the very
    //    *next* render after that, a *new* fetch/promise will get created.
  );
  _react.useEffect.call(void 0, () => {
    poller.inc();
    poller.pollNowIfStale();
    return () => {
      poller.dec();
    };
  }, [poller]);
  return useSignal(
    store.outputs.loadingUserThreads.getOrCreate(queryKey).signal
  );
}
function useUserThreadsSuspense_experimental(options = {}) {
  ensureNotServerSide();
  const client = useClient();
  const { store } = getLiveblocksExtrasForClient(client);
  const queryKey = makeUserThreadsQueryKey(options.query);
  use(store.outputs.loadingUserThreads.getOrCreate(queryKey).waitUntilLoaded());
  const result = useUserThreads_experimental(options);
  _core.assert.call(void 0, !result.error, "Did not expect error");
  _core.assert.call(void 0, !result.isLoading, "Did not expect loading");
  return result;
}
function useInboxNotifications() {
  return useInboxNotifications_withClient(useClient(), identity2, _core.shallow);
}
function useInboxNotificationsSuspense() {
  return useInboxNotificationsSuspense_withClient(useClient());
}
function useInboxNotificationThread(inboxNotificationId) {
  return useInboxNotificationThread_withClient(
    useClient(),
    inboxNotificationId
  );
}
function useMarkAllInboxNotificationsAsRead() {
  return useMarkAllInboxNotificationsAsRead_withClient(useClient());
}
function useMarkInboxNotificationAsRead() {
  return useMarkInboxNotificationAsRead_withClient(useClient());
}
function useDeleteAllInboxNotifications() {
  return useDeleteAllInboxNotifications_withClient(useClient());
}
function useDeleteInboxNotification() {
  return useDeleteInboxNotification_withClient(useClient());
}
function useUnreadInboxNotificationsCount() {
  return useUnreadInboxNotificationsCount_withClient(useClient());
}
function useUnreadInboxNotificationsCountSuspense() {
  return useUnreadInboxNotificationsCountSuspense_withClient(useClient());
}
function useUser(userId) {
  const client = useClient();
  return useUser_withClient(client, userId);
}
function useUserSuspense(userId) {
  const client = useClient();
  return useUserSuspense_withClient(client, userId);
}
function useRoomInfo(roomId) {
  return useRoomInfo_withClient(useClient(), roomId);
}
function useRoomInfoSuspense(roomId) {
  return useRoomInfoSuspense_withClient(useClient(), roomId);
}
var _useInboxNotificationThread = useInboxNotificationThread;
var _useUser = useUser;
var _useUserSuspense = useUserSuspense;
var _useUserThreads_experimental = useUserThreads_experimental;
var _useUserThreadsSuspense_experimental = useUserThreadsSuspense_experimental;
function useSyncStatus_withClient(client, options) {
  const smooth = useInitial(_nullishCoalesce(_optionalChain([options, 'optionalAccess', _13 => _13.smooth]), () => ( false)));
  if (smooth) {
    return useSyncStatusSmooth_withClient(client);
  } else {
    return useSyncStatusImmediate_withClient(client);
  }
}
function useSyncStatusImmediate_withClient(client) {
  return _react.useSyncExternalStore.call(void 0, 
    client.events.syncStatus.subscribe,
    client.getSyncStatus,
    client.getSyncStatus
  );
}
function useSyncStatusSmooth_withClient(client) {
  const getter = client.getSyncStatus;
  const [status, setStatus] = _react.useState.call(void 0, getter);
  const oldStatus = useLatest(getter());
  _react.useEffect.call(void 0, () => {
    let timeoutId;
    const unsub = client.events.syncStatus.subscribe(() => {
      const newStatus = getter();
      if (oldStatus.current === "synchronizing" && newStatus === "synchronized") {
        timeoutId = setTimeout(() => setStatus(newStatus), config.SMOOTH_DELAY);
      } else {
        clearTimeout(timeoutId);
        setStatus(newStatus);
      }
    });
    return () => {
      clearTimeout(timeoutId);
      unsub();
    };
  }, [client, getter, oldStatus]);
  return status;
}
function useSyncStatus(options) {
  return useSyncStatus_withClient(useClient(), options);
}
function useErrorListener(callback) {
  const client = useClient();
  const savedCallback = useLatest(callback);
  _react.useEffect.call(void 0, 
    () => client.events.error.subscribe((e) => savedCallback.current(e)),
    [client, savedCallback]
  );
}

// src/room.tsx
var _client = require('@liveblocks/client');






















// src/use-scroll-to-comment-on-load-effect.ts

function handleScrollToCommentOnLoad(shouldScrollOnLoad, state) {
  if (shouldScrollOnLoad === false) return;
  if (!state.threads) return;
  const isWindowDefined = typeof window !== "undefined";
  if (!isWindowDefined) return;
  const hash = window.location.hash;
  const commentId = hash.slice(1);
  if (!commentId.startsWith("cm_")) return;
  const comment = document.getElementById(commentId);
  if (comment === null) return;
  const comments = state.threads.flatMap((thread) => thread.comments);
  const isCommentInThreads = comments.some(
    (comment2) => comment2.id === commentId
  );
  if (!isCommentInThreads) return;
  comment.scrollIntoView();
}
function useScrollToCommentOnLoadEffect(shouldScrollOnLoad, state) {
  _react.useEffect.call(void 0, 
    () => {
      handleScrollToCommentOnLoad(shouldScrollOnLoad, state);
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps -- We only want to run this effect once
    [state.isLoading]
  );
}

// src/room.tsx

var noop3 = () => {
};
var identity3 = (x) => x;
var STABLE_EMPTY_LIST = Object.freeze([]);
function alwaysEmptyList() {
  return STABLE_EMPTY_LIST;
}
function alwaysNull() {
  return null;
}
function selectorFor_useOthersConnectionIds(others) {
  return others.map((user) => user.connectionId);
}
function makeMutationContext(room) {
  const cannotUseUntil = "This mutation cannot be used until";
  const needsPresence = `${cannotUseUntil} connected to the Liveblocks room`;
  const needsStorage = `${cannotUseUntil} storage has been loaded`;
  return {
    get storage() {
      const mutableRoot = room.getStorageSnapshot();
      if (mutableRoot === null) {
        throw new Error(needsStorage);
      }
      return mutableRoot;
    },
    get self() {
      const self = room.getSelf();
      if (self === null) {
        throw new Error(needsPresence);
      }
      return self;
    },
    get others() {
      const others = room.getOthers();
      if (room.getSelf() === null) {
        throw new Error(needsPresence);
      }
      return others;
    },
    setMyPresence: room.updatePresence
  };
}
function getCurrentUserId(client) {
  const userId = client[_core.kInternal].currentUserId.get();
  if (userId === void 0) {
    return "anonymous";
  }
  return userId;
}
var _extras2 = /* @__PURE__ */ new WeakMap();
var _bundles2 = /* @__PURE__ */ new WeakMap();
function getOrCreateRoomContextBundle(client) {
  let bundle = _bundles2.get(client);
  if (!bundle) {
    bundle = makeRoomContextBundle(client);
    _bundles2.set(client, bundle);
  }
  return bundle;
}
function getRoomExtrasForClient(client) {
  let extras = _extras2.get(client);
  if (!extras) {
    extras = makeRoomExtrasForClient(client);
    _extras2.set(client, extras);
  }
  return extras;
}
function makeRoomExtrasForClient(client) {
  const store = getUmbrellaStoreForClient(client);
  function onMutationFailure(optimisticId, context, innerError) {
    store.optimisticUpdates.remove(optimisticId);
    if (innerError instanceof _core.HttpError) {
      if (innerError.status === 403) {
        const detailedMessage = [
          innerError.message,
          _optionalChain([innerError, 'access', _14 => _14.details, 'optionalAccess', _15 => _15.suggestion]),
          _optionalChain([innerError, 'access', _16 => _16.details, 'optionalAccess', _17 => _17.docs])
        ].filter(Boolean).join("\n");
        _core.console.error(detailedMessage);
      }
      client[_core.kInternal].emitError(context, innerError);
    } else {
      throw innerError;
    }
  }
  const threadsPollersByRoomId = new (0, _core.DefaultMap)(
    (roomId) => _core.makePoller.call(void 0, 
      async (signal) => {
        try {
          return await store.fetchRoomThreadsDeltaUpdate(roomId, signal);
        } catch (err) {
          _core.console.warn(`Polling new threads for '${roomId}' failed: ${String(err)}`);
          throw err;
        }
      },
      config.ROOM_THREADS_POLL_INTERVAL,
      { maxStaleTimeMs: config.ROOM_THREADS_MAX_STALE_TIME }
    )
  );
  const versionsPollersByRoomId = new (0, _core.DefaultMap)(
    (roomId) => _core.makePoller.call(void 0, 
      async (signal) => {
        try {
          return await store.fetchRoomVersionsDeltaUpdate(roomId, signal);
        } catch (err) {
          _core.console.warn(`Polling new history versions for '${roomId}' failed: ${String(err)}`);
          throw err;
        }
      },
      config.HISTORY_VERSIONS_POLL_INTERVAL,
      { maxStaleTimeMs: config.HISTORY_VERSIONS_MAX_STALE_TIME }
    )
  );
  const roomNotificationSettingsPollersByRoomId = new (0, _core.DefaultMap)(
    (roomId) => _core.makePoller.call(void 0, 
      async (signal) => {
        try {
          return await store.refreshRoomNotificationSettings(roomId, signal);
        } catch (err) {
          _core.console.warn(`Polling notification settings for '${roomId}' failed: ${String(err)}`);
          throw err;
        }
      },
      config.NOTIFICATION_SETTINGS_POLL_INTERVAL,
      { maxStaleTimeMs: config.NOTIFICATION_SETTINGS_MAX_STALE_TIME }
    )
  );
  return {
    store,
    onMutationFailure,
    getOrCreateThreadsPollerForRoomId: threadsPollersByRoomId.getOrCreate.bind(
      threadsPollersByRoomId
    ),
    getOrCreateVersionsPollerForRoomId: versionsPollersByRoomId.getOrCreate.bind(versionsPollersByRoomId),
    getOrCreateNotificationsSettingsPollerForRoomId: roomNotificationSettingsPollersByRoomId.getOrCreate.bind(
      roomNotificationSettingsPollersByRoomId
    )
  };
}
function makeRoomContextBundle(client) {
  function RoomProvider_withImplicitLiveblocksProvider(props) {
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, LiveblocksProviderWithClient, { client, allowNesting: true, children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, RoomProvider, { ...props }) });
  }
  const shared = createSharedContext(client);
  const bundle = {
    RoomContext,
    RoomProvider: RoomProvider_withImplicitLiveblocksProvider,
    useRoom,
    useStatus,
    useStorageStatus,
    useBatch,
    useBroadcastEvent,
    useOthersListener,
    useLostConnectionListener,
    useEventListener,
    useHistory,
    useUndo,
    useRedo,
    useCanRedo,
    useCanUndo,
    useStorageRoot,
    useStorage,
    useSelf,
    useMyPresence,
    useUpdateMyPresence,
    useOthers,
    useOthersMapped,
    useOthersConnectionIds,
    useOther,
    useMutation,
    useThreads,
    useCreateThread,
    useDeleteThread,
    useEditThreadMetadata,
    useMarkThreadAsResolved,
    useMarkThreadAsUnresolved,
    useCreateComment,
    useEditComment,
    useDeleteComment,
    useAddReaction,
    useRemoveReaction,
    useMarkThreadAsRead,
    useThreadSubscription,
    useAttachmentUrl,
    useHistoryVersions,
    useHistoryVersionData,
    useRoomNotificationSettings,
    useUpdateRoomNotificationSettings,
    ...shared.classic,
    suspense: {
      RoomContext,
      RoomProvider: RoomProvider_withImplicitLiveblocksProvider,
      useRoom,
      useStatus,
      useStorageStatus: useStorageStatusSuspense,
      useBatch,
      useBroadcastEvent,
      useOthersListener,
      useLostConnectionListener,
      useEventListener,
      useHistory,
      useUndo,
      useRedo,
      useCanRedo,
      useCanUndo,
      useStorageRoot,
      useStorage: useStorageSuspense,
      useSelf: useSelfSuspense,
      useMyPresence,
      useUpdateMyPresence,
      useOthers: useOthersSuspense,
      useOthersMapped: useOthersMappedSuspense,
      useOthersConnectionIds: useOthersConnectionIdsSuspense,
      useOther: useOtherSuspense,
      useMutation,
      useThreads: useThreadsSuspense,
      useCreateThread,
      useDeleteThread,
      useEditThreadMetadata,
      useMarkThreadAsResolved,
      useMarkThreadAsUnresolved,
      useCreateComment,
      useEditComment,
      useDeleteComment,
      useAddReaction,
      useRemoveReaction,
      useMarkThreadAsRead,
      useThreadSubscription,
      useAttachmentUrl: useAttachmentUrlSuspense,
      // TODO: useHistoryVersionData: useHistoryVersionDataSuspense,
      useHistoryVersions: useHistoryVersionsSuspense,
      useRoomNotificationSettings: useRoomNotificationSettingsSuspense,
      useUpdateRoomNotificationSettings,
      ...shared.suspense
    }
  };
  return Object.defineProperty(bundle, _core.kInternal, {
    enumerable: false
  });
}
function RoomProvider(props) {
  const client = useClient();
  const [cache] = _react.useState.call(void 0, 
    () => /* @__PURE__ */ new Map()
  );
  const stableEnterRoom = _react.useCallback.call(void 0, 
    (roomId, options) => {
      const cached = cache.get(roomId);
      if (cached) return cached;
      const rv = client.enterRoom(roomId, options);
      const origLeave = rv.leave;
      rv.leave = () => {
        origLeave();
        cache.delete(roomId);
      };
      cache.set(roomId, rv);
      return rv;
    },
    [client, cache]
  );
  return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
    RoomProviderInner,
    {
      ...props,
      stableEnterRoom
    }
  );
}
function RoomProviderInner(props) {
  const client = useClient();
  const { id: roomId, stableEnterRoom } = props;
  if (process.env.NODE_ENV !== "production") {
    if (!roomId) {
      throw new Error(
        "RoomProvider id property is required. For more information: https://liveblocks.io/docs/errors/liveblocks-react/RoomProvider-id-property-is-required"
      );
    }
    if (typeof roomId !== "string") {
      throw new Error("RoomProvider id property should be a string.");
    }
    const majorReactVersion = parseInt(_react.version) || 1;
    const requiredVersion = 18;
    _core.errorIf.call(void 0, 
      majorReactVersion < requiredVersion,
      `React ${requiredVersion} or higher is required (you\u2019re on ${_react.version})`
    );
  }
  const frozenProps = useInitial({
    initialPresence: props.initialPresence,
    initialStorage: props.initialStorage,
    autoConnect: _nullishCoalesce(props.autoConnect, () => ( typeof window !== "undefined"))
  });
  const [{ room }, setRoomLeavePair] = _react.useState.call(void 0, 
    () => stableEnterRoom(roomId, {
      ...frozenProps,
      autoConnect: false
      // Deliberately using false here on the first render, see below
    })
  );
  _react.useEffect.call(void 0, () => {
    const { store } = getRoomExtrasForClient(client);
    async function handleCommentEvent(message) {
      if (message.type === _core.ServerMsgCode.THREAD_DELETED) {
        store.deleteThread(message.threadId, null);
        return;
      }
      const info = await room.getThread(message.threadId);
      if (!info.thread) {
        store.deleteThread(message.threadId, null);
        return;
      }
      const { thread, inboxNotification: maybeNotification } = info;
      const existingThread = store.outputs.threads.get().getEvenIfDeleted(message.threadId);
      switch (message.type) {
        case _core.ServerMsgCode.COMMENT_EDITED:
        case _core.ServerMsgCode.THREAD_METADATA_UPDATED:
        case _core.ServerMsgCode.THREAD_UPDATED:
        case _core.ServerMsgCode.COMMENT_REACTION_ADDED:
        case _core.ServerMsgCode.COMMENT_REACTION_REMOVED:
        case _core.ServerMsgCode.COMMENT_DELETED:
          if (!existingThread) break;
          store.updateThreadifications(
            [thread],
            maybeNotification ? [maybeNotification] : []
          );
          break;
        case _core.ServerMsgCode.COMMENT_CREATED:
          store.updateThreadifications(
            [thread],
            maybeNotification ? [maybeNotification] : []
          );
          break;
        default:
          break;
      }
    }
    return room.events.comments.subscribe(
      (message) => void handleCommentEvent(message)
    );
  }, [client, room]);
  _react.useEffect.call(void 0, () => {
    const pair = stableEnterRoom(roomId, frozenProps);
    setRoomLeavePair(pair);
    const { room: room2, leave } = pair;
    if (frozenProps.autoConnect) {
      room2.connect();
    }
    return () => {
      leave();
    };
  }, [roomId, frozenProps, stableEnterRoom]);
  return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, RoomContext.Provider, { value: room, children: props.children });
}
function useRoom() {
  const room = useRoomOrNull();
  if (room === null) {
    throw new Error("RoomProvider is missing from the React tree.");
  }
  return room;
}
function useStatus() {
  const room = useRoom();
  const subscribe = room.events.status.subscribe;
  const getSnapshot = room.getStatus;
  const getServerSnapshot = room.getStatus;
  return _react.useSyncExternalStore.call(void 0, subscribe, getSnapshot, getServerSnapshot);
}
function useReportTextEditor(editor, rootKey) {
  const isReported = _react.useRef.call(void 0, false);
  const room = useRoom();
  _react.useEffect.call(void 0, () => {
    if (isReported.current) {
      return;
    }
    const unsubscribe = room.events.status.subscribe((status) => {
      if (status === "connected" && !isReported.current) {
        isReported.current = true;
        void room[_core.kInternal].reportTextEditor(editor, rootKey);
      }
    });
    return unsubscribe;
  }, [room, editor, rootKey]);
}
function useYjsProvider() {
  const room = useRoom();
  const subscribe = _react.useCallback.call(void 0, 
    (onStoreChange) => {
      return room[_core.kInternal].yjsProviderDidChange.subscribe(onStoreChange);
    },
    [room]
  );
  const getSnapshot = _react.useCallback.call(void 0, () => {
    return room[_core.kInternal].getYjsProvider();
  }, [room]);
  return _react.useSyncExternalStore.call(void 0, subscribe, getSnapshot, getSnapshot);
}
function useCreateTextMention() {
  const room = useRoom();
  return _react.useCallback.call(void 0, 
    (userId, mentionId) => {
      room[_core.kInternal].createTextMention(userId, mentionId).catch((err) => {
        _core.console.error(
          `Cannot create text mention for user '${userId}' and mention '${mentionId}'`,
          err
        );
      });
    },
    [room]
  );
}
function useDeleteTextMention() {
  const room = useRoom();
  return _react.useCallback.call(void 0, 
    (mentionId) => {
      room[_core.kInternal].deleteTextMention(mentionId).catch((err) => {
        _core.console.error(`Cannot delete text mention '${mentionId}'`, err);
      });
    },
    [room]
  );
}
function useResolveMentionSuggestions() {
  const client = useClient();
  return client[_core.kInternal].resolveMentionSuggestions;
}
function useMentionSuggestionsCache() {
  const client = useClient();
  return client[_core.kInternal].mentionSuggestionsCache;
}
function useStorageStatus(options) {
  const smooth = useInitial(_nullishCoalesce(_optionalChain([options, 'optionalAccess', _18 => _18.smooth]), () => ( false)));
  if (smooth) {
    return useStorageStatusSmooth();
  } else {
    return useStorageStatusImmediate();
  }
}
function useStorageStatusImmediate() {
  const room = useRoom();
  const subscribe = room.events.storageStatus.subscribe;
  const getSnapshot = room.getStorageStatus;
  const getServerSnapshot = room.getStorageStatus;
  return _react.useSyncExternalStore.call(void 0, subscribe, getSnapshot, getServerSnapshot);
}
function useStorageStatusSmooth() {
  const room = useRoom();
  const [status, setStatus] = _react.useState.call(void 0, room.getStorageStatus);
  const oldStatus = useLatest(room.getStorageStatus());
  _react.useEffect.call(void 0, () => {
    let timeoutId;
    const unsub = room.events.storageStatus.subscribe((newStatus) => {
      if (oldStatus.current === "synchronizing" && newStatus === "synchronized") {
        timeoutId = setTimeout(() => setStatus(newStatus), config.SMOOTH_DELAY);
      } else {
        clearTimeout(timeoutId);
        setStatus(newStatus);
      }
    });
    return () => {
      clearTimeout(timeoutId);
      unsub();
    };
  }, [room, oldStatus]);
  return status;
}
function useBatch() {
  return useRoom().batch;
}
function useBroadcastEvent() {
  const room = useRoom();
  return _react.useCallback.call(void 0, 
    (event, options = { shouldQueueEventIfNotReady: false }) => {
      room.broadcastEvent(event, options);
    },
    [room]
  );
}
function useOthersListener(callback) {
  const room = useRoom();
  const savedCallback = useLatest(callback);
  _react.useEffect.call(void 0, 
    () => room.events.others.subscribe((event) => savedCallback.current(event)),
    [room, savedCallback]
  );
}
function useLostConnectionListener(callback) {
  const room = useRoom();
  const savedCallback = useLatest(callback);
  _react.useEffect.call(void 0, 
    () => room.events.lostConnection.subscribe(
      (event) => savedCallback.current(event)
    ),
    [room, savedCallback]
  );
}
function useEventListener(callback) {
  const room = useRoom();
  const savedCallback = useLatest(callback);
  _react.useEffect.call(void 0, () => {
    const listener = (eventData) => {
      savedCallback.current(eventData);
    };
    return room.events.customEvent.subscribe(listener);
  }, [room, savedCallback]);
}
function useHistory() {
  return useRoom().history;
}
function useUndo() {
  return useHistory().undo;
}
function useRedo() {
  return useHistory().redo;
}
function useCanUndo() {
  const room = useRoom();
  const subscribe = room.events.history.subscribe;
  const canUndo = room.history.canUndo;
  return _react.useSyncExternalStore.call(void 0, subscribe, canUndo, canUndo);
}
function useCanRedo() {
  const room = useRoom();
  const subscribe = room.events.history.subscribe;
  const canRedo = room.history.canRedo;
  return _react.useSyncExternalStore.call(void 0, subscribe, canRedo, canRedo);
}
function useSelf(maybeSelector, isEqual) {
  const room = useRoom();
  const subscribe = room.events.self.subscribe;
  const getSnapshot = room.getSelf;
  const selector = _nullishCoalesce(maybeSelector, () => ( identity3));
  const wrappedSelector = _react.useCallback.call(void 0, 
    (me) => me !== null ? selector(me) : null,
    [selector]
  );
  const getServerSnapshot = alwaysNull;
  return useSyncExternalStoreWithSelector(
    subscribe,
    getSnapshot,
    getServerSnapshot,
    wrappedSelector,
    isEqual
  );
}
function useMyPresence() {
  const room = useRoom();
  const subscribe = room.events.myPresence.subscribe;
  const getSnapshot = room.getPresence;
  const presence = _react.useSyncExternalStore.call(void 0, subscribe, getSnapshot, getSnapshot);
  const setPresence = room.updatePresence;
  return [presence, setPresence];
}
function useUpdateMyPresence() {
  return useRoom().updatePresence;
}
function useOthers(selector, isEqual) {
  const room = useRoom();
  const subscribe = room.events.others.subscribe;
  const getSnapshot = room.getOthers;
  const getServerSnapshot = alwaysEmptyList;
  return useSyncExternalStoreWithSelector(
    subscribe,
    getSnapshot,
    getServerSnapshot,
    _nullishCoalesce(selector, () => ( identity3)),
    isEqual
  );
}
function useOthersMapped(itemSelector, itemIsEqual) {
  const wrappedSelector = _react.useCallback.call(void 0, 
    (others) => others.map((other) => [other.connectionId, itemSelector(other)]),
    [itemSelector]
  );
  const wrappedIsEqual = _react.useCallback.call(void 0, 
    (a, b) => {
      const eq = _nullishCoalesce(itemIsEqual, () => ( Object.is));
      return a.length === b.length && a.every((atuple, index) => {
        const btuple = b[index];
        return atuple[0] === btuple[0] && eq(atuple[1], btuple[1]);
      });
    },
    [itemIsEqual]
  );
  return useOthers(wrappedSelector, wrappedIsEqual);
}
function useOthersConnectionIds() {
  return useOthers(selectorFor_useOthersConnectionIds, _client.shallow);
}
var NOT_FOUND = Symbol();
function useOther(connectionId, selector, isEqual) {
  const wrappedSelector = _react.useCallback.call(void 0, 
    (others) => {
      const other2 = others.find((other3) => other3.connectionId === connectionId);
      return other2 !== void 0 ? selector(other2) : NOT_FOUND;
    },
    [connectionId, selector]
  );
  const wrappedIsEqual = _react.useCallback.call(void 0, 
    (prev, curr) => {
      if (prev === NOT_FOUND || curr === NOT_FOUND) {
        return prev === curr;
      }
      const eq = _nullishCoalesce(isEqual, () => ( Object.is));
      return eq(prev, curr);
    },
    [isEqual]
  );
  const other = useOthers(wrappedSelector, wrappedIsEqual);
  if (other === NOT_FOUND) {
    throw new Error(
      `No such other user with connection id ${connectionId} exists`
    );
  }
  return other;
}
function useMutableStorageRoot() {
  const room = useRoom();
  const subscribe = room.events.storageDidLoad.subscribeOnce;
  const getSnapshot = room.getStorageSnapshot;
  const getServerSnapshot = alwaysNull;
  return _react.useSyncExternalStore.call(void 0, subscribe, getSnapshot, getServerSnapshot);
}
function useStorageRoot() {
  return [useMutableStorageRoot()];
}
function useStorage(selector, isEqual) {
  const room = useRoom();
  const rootOrNull = useMutableStorageRoot();
  const wrappedSelector = _react.useCallback.call(void 0, 
    (rootOrNull2) => rootOrNull2 !== null ? selector(rootOrNull2) : null,
    [selector]
  );
  const subscribe = _react.useCallback.call(void 0, 
    (onStoreChange) => rootOrNull !== null ? room.subscribe(rootOrNull, onStoreChange, { isDeep: true }) : noop3,
    [room, rootOrNull]
  );
  const getSnapshot = _react.useCallback.call(void 0, () => {
    if (rootOrNull === null) {
      return null;
    } else {
      const root = rootOrNull;
      const imm = root.toImmutable();
      return imm;
    }
  }, [rootOrNull]);
  const getServerSnapshot = alwaysNull;
  return useSyncExternalStoreWithSelector(
    subscribe,
    getSnapshot,
    getServerSnapshot,
    wrappedSelector,
    isEqual
  );
}
function useMutation(callback, deps) {
  const room = useRoom();
  return _react.useMemo.call(void 0, 
    () => {
      return (...args) => (
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        room.batch(
          () => (
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return
            callback(
              makeMutationContext(room),
              ...args
            )
          )
        )
      );
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [room, ...deps]
  );
}
function useThreads(options = {}) {
  const { scrollOnLoad = true } = options;
  const client = useClient();
  const room = useRoom();
  const { store, getOrCreateThreadsPollerForRoomId } = getRoomExtrasForClient(client);
  const queryKey = makeRoomThreadsQueryKey(room.id, options.query);
  const poller = getOrCreateThreadsPollerForRoomId(room.id);
  _react.useEffect.call(void 0, 
    () => void store.outputs.loadingRoomThreads.getOrCreate(queryKey).waitUntilLoaded()
    // NOTE: Deliberately *not* using a dependency array here!
    //
    // It is important to call waitUntil on *every* render.
    // This is harmless though, on most renders, except:
    // 1. The very first render, in which case we'll want to trigger the initial page fetch.
    // 2. All other subsequent renders now "just" return the same promise (a quick operation).
    // 3. If ever the promise would fail, then after 5 seconds it would reset, and on the very
    //    *next* render after that, a *new* fetch/promise will get created.
  );
  _react.useEffect.call(void 0, () => {
    poller.inc();
    poller.pollNowIfStale();
    return () => poller.dec();
  }, [poller]);
  const result = useSignal(
    store.outputs.loadingRoomThreads.getOrCreate(queryKey).signal
  );
  useScrollToCommentOnLoadEffect(scrollOnLoad, result);
  return result;
}
function useCreateThread() {
  return useCreateRoomThread(useRoom().id);
}
function useCreateRoomThread(roomId) {
  const client = useClient();
  return _react.useCallback.call(void 0, 
    (options) => {
      const body = options.body;
      const metadata = _nullishCoalesce(options.metadata, () => ( {}));
      const attachments = options.attachments;
      const threadId = _core.createThreadId.call(void 0, );
      const commentId = _core.createCommentId.call(void 0, );
      const createdAt = /* @__PURE__ */ new Date();
      const newComment = {
        id: commentId,
        threadId,
        roomId,
        createdAt,
        type: "comment",
        userId: getCurrentUserId(client),
        body,
        reactions: [],
        attachments: _nullishCoalesce(attachments, () => ( []))
      };
      const newThread = {
        id: threadId,
        type: "thread",
        createdAt,
        updatedAt: createdAt,
        roomId,
        metadata,
        comments: [newComment],
        resolved: false
      };
      const { store, onMutationFailure } = getRoomExtrasForClient(client);
      const optimisticId = store.optimisticUpdates.add({
        type: "create-thread",
        thread: newThread,
        roomId
      });
      const attachmentIds = _optionalChain([attachments, 'optionalAccess', _19 => _19.map, 'call', _20 => _20((attachment) => attachment.id)]);
      client[_core.kInternal].httpClient.createThread({
        roomId,
        threadId,
        commentId,
        body,
        metadata,
        attachmentIds
      }).then(
        (thread) => {
          store.createThread(optimisticId, thread);
        },
        (err) => onMutationFailure(
          optimisticId,
          {
            type: "CREATE_THREAD_ERROR",
            roomId,
            threadId,
            commentId,
            body,
            metadata
          },
          err
        )
      );
      return newThread;
    },
    [client, roomId]
  );
}
function useDeleteThread() {
  return useDeleteRoomThread(useRoom().id);
}
function useDeleteRoomThread(roomId) {
  const client = useClient();
  return _react.useCallback.call(void 0, 
    (threadId) => {
      const { store, onMutationFailure } = getRoomExtrasForClient(client);
      const userId = getCurrentUserId(client);
      const existing = store.outputs.threads.get().get(threadId);
      if (_optionalChain([existing, 'optionalAccess', _21 => _21.comments, 'optionalAccess', _22 => _22[0], 'optionalAccess', _23 => _23.userId]) !== userId) {
        throw new Error("Only the thread creator can delete the thread");
      }
      const optimisticId = store.optimisticUpdates.add({
        type: "delete-thread",
        roomId,
        threadId,
        deletedAt: /* @__PURE__ */ new Date()
      });
      client[_core.kInternal].httpClient.deleteThread({ roomId, threadId }).then(
        () => {
          store.deleteThread(threadId, optimisticId);
        },
        (err) => onMutationFailure(
          optimisticId,
          { type: "DELETE_THREAD_ERROR", roomId, threadId },
          err
        )
      );
    },
    [client, roomId]
  );
}
function useEditThreadMetadata() {
  return useEditRoomThreadMetadata(useRoom().id);
}
function useEditRoomThreadMetadata(roomId) {
  const client = useClient();
  return _react.useCallback.call(void 0, 
    (options) => {
      if (!options.metadata) {
        return;
      }
      const threadId = options.threadId;
      const metadata = options.metadata;
      const updatedAt = /* @__PURE__ */ new Date();
      const { store, onMutationFailure } = getRoomExtrasForClient(client);
      const optimisticId = store.optimisticUpdates.add({
        type: "edit-thread-metadata",
        metadata,
        threadId,
        updatedAt
      });
      client[_core.kInternal].httpClient.editThreadMetadata({ roomId, threadId, metadata }).then(
        (metadata2) => (
          // Replace the optimistic update by the real thing
          store.patchThread(threadId, optimisticId, { metadata: metadata2 }, updatedAt)
        ),
        (err) => onMutationFailure(
          optimisticId,
          {
            type: "EDIT_THREAD_METADATA_ERROR",
            roomId,
            threadId,
            metadata
          },
          err
        )
      );
    },
    [client, roomId]
  );
}
function useCreateComment() {
  return useCreateRoomComment(useRoom().id);
}
function useCreateRoomComment(roomId) {
  const client = useClient();
  return _react.useCallback.call(void 0, 
    ({ threadId, body, attachments }) => {
      const commentId = _core.createCommentId.call(void 0, );
      const createdAt = /* @__PURE__ */ new Date();
      const comment = {
        id: commentId,
        threadId,
        roomId,
        type: "comment",
        createdAt,
        userId: getCurrentUserId(client),
        body,
        reactions: [],
        attachments: _nullishCoalesce(attachments, () => ( []))
      };
      const { store, onMutationFailure } = getRoomExtrasForClient(client);
      const optimisticId = store.optimisticUpdates.add({
        type: "create-comment",
        comment
      });
      const attachmentIds = _optionalChain([attachments, 'optionalAccess', _24 => _24.map, 'call', _25 => _25((attachment) => attachment.id)]);
      client[_core.kInternal].httpClient.createComment({ roomId, threadId, commentId, body, attachmentIds }).then(
        (newComment) => {
          store.createComment(newComment, optimisticId);
        },
        (err) => onMutationFailure(
          optimisticId,
          {
            type: "CREATE_COMMENT_ERROR",
            roomId,
            threadId,
            commentId,
            body
          },
          err
        )
      );
      return comment;
    },
    [client, roomId]
  );
}
function useEditComment() {
  return useEditRoomComment(useRoom().id);
}
function useEditRoomComment(roomId) {
  const client = useClient();
  return _react.useCallback.call(void 0, 
    ({ threadId, commentId, body, attachments }) => {
      const editedAt = /* @__PURE__ */ new Date();
      const { store, onMutationFailure } = getRoomExtrasForClient(client);
      const existing = store.outputs.threads.get().getEvenIfDeleted(threadId);
      if (existing === void 0) {
        _core.console.warn(
          `Internal unexpected behavior. Cannot edit comment in thread "${threadId}" because the thread does not exist in the cache.`
        );
        return;
      }
      const comment = existing.comments.find(
        (comment2) => comment2.id === commentId
      );
      if (comment === void 0 || comment.deletedAt !== void 0) {
        _core.console.warn(
          `Internal unexpected behavior. Cannot edit comment "${commentId}" in thread "${threadId}" because the comment does not exist in the cache.`
        );
        return;
      }
      const optimisticId = store.optimisticUpdates.add({
        type: "edit-comment",
        comment: {
          ...comment,
          editedAt,
          body,
          attachments: _nullishCoalesce(attachments, () => ( []))
        }
      });
      const attachmentIds = _optionalChain([attachments, 'optionalAccess', _26 => _26.map, 'call', _27 => _27((attachment) => attachment.id)]);
      client[_core.kInternal].httpClient.editComment({ roomId, threadId, commentId, body, attachmentIds }).then(
        (editedComment) => {
          store.editComment(threadId, optimisticId, editedComment);
        },
        (err) => onMutationFailure(
          optimisticId,
          { type: "EDIT_COMMENT_ERROR", roomId, threadId, commentId, body },
          err
        )
      );
    },
    [client, roomId]
  );
}
function useDeleteComment() {
  return useDeleteRoomComment(useRoom().id);
}
function useDeleteRoomComment(roomId) {
  const client = useClient();
  return _react.useCallback.call(void 0, 
    ({ threadId, commentId }) => {
      const deletedAt = /* @__PURE__ */ new Date();
      const { store, onMutationFailure } = getRoomExtrasForClient(client);
      const optimisticId = store.optimisticUpdates.add({
        type: "delete-comment",
        threadId,
        commentId,
        deletedAt,
        roomId
      });
      client[_core.kInternal].httpClient.deleteComment({ roomId, threadId, commentId }).then(
        () => {
          store.deleteComment(threadId, optimisticId, commentId, deletedAt);
        },
        (err) => onMutationFailure(
          optimisticId,
          { type: "DELETE_COMMENT_ERROR", roomId, threadId, commentId },
          err
        )
      );
    },
    [client, roomId]
  );
}
function useAddReaction() {
  return useAddRoomCommentReaction(useRoom().id);
}
function useAddRoomCommentReaction(roomId) {
  const client = useClient();
  return _react.useCallback.call(void 0, 
    ({ threadId, commentId, emoji }) => {
      const createdAt = /* @__PURE__ */ new Date();
      const userId = getCurrentUserId(client);
      const { store, onMutationFailure } = getRoomExtrasForClient(client);
      const optimisticId = store.optimisticUpdates.add({
        type: "add-reaction",
        threadId,
        commentId,
        reaction: {
          emoji,
          userId,
          createdAt
        }
      });
      client[_core.kInternal].httpClient.addReaction({ roomId, threadId, commentId, emoji }).then(
        (addedReaction) => {
          store.addReaction(
            threadId,
            optimisticId,
            commentId,
            addedReaction,
            createdAt
          );
        },
        (err) => onMutationFailure(
          optimisticId,
          {
            type: "ADD_REACTION_ERROR",
            roomId,
            threadId,
            commentId,
            emoji
          },
          err
        )
      );
    },
    [client, roomId]
  );
}
function useRemoveReaction() {
  return useRemoveRoomCommentReaction(useRoom().id);
}
function useRemoveRoomCommentReaction(roomId) {
  const client = useClient();
  return _react.useCallback.call(void 0, 
    ({ threadId, commentId, emoji }) => {
      const userId = getCurrentUserId(client);
      const removedAt = /* @__PURE__ */ new Date();
      const { store, onMutationFailure } = getRoomExtrasForClient(client);
      const optimisticId = store.optimisticUpdates.add({
        type: "remove-reaction",
        threadId,
        commentId,
        emoji,
        userId,
        removedAt
      });
      client[_core.kInternal].httpClient.removeReaction({ roomId, threadId, commentId, emoji }).then(
        () => {
          store.removeReaction(
            threadId,
            optimisticId,
            commentId,
            emoji,
            userId,
            removedAt
          );
        },
        (err) => onMutationFailure(
          optimisticId,
          {
            type: "REMOVE_REACTION_ERROR",
            roomId,
            threadId,
            commentId,
            emoji
          },
          err
        )
      );
    },
    [client, roomId]
  );
}
function useMarkThreadAsRead() {
  return useMarkRoomThreadAsRead(useRoom().id);
}
function useMarkRoomThreadAsRead(roomId) {
  const client = useClient();
  return _react.useCallback.call(void 0, 
    (threadId) => {
      const { store, onMutationFailure } = getRoomExtrasForClient(client);
      const inboxNotification = Object.values(
        store.outputs.notifications.get().notificationsById
      ).find(
        (inboxNotification2) => inboxNotification2.kind === "thread" && inboxNotification2.threadId === threadId
      );
      if (!inboxNotification) return;
      const now = /* @__PURE__ */ new Date();
      const optimisticId = store.optimisticUpdates.add({
        type: "mark-inbox-notification-as-read",
        inboxNotificationId: inboxNotification.id,
        readAt: now
      });
      client[_core.kInternal].httpClient.markRoomInboxNotificationAsRead({
        roomId,
        inboxNotificationId: inboxNotification.id
      }).then(
        () => {
          store.markInboxNotificationRead(
            inboxNotification.id,
            now,
            optimisticId
          );
        },
        (err) => {
          onMutationFailure(
            optimisticId,
            {
              type: "MARK_INBOX_NOTIFICATION_AS_READ_ERROR",
              roomId,
              inboxNotificationId: inboxNotification.id
            },
            err
          );
          return;
        }
      );
    },
    [client, roomId]
  );
}
function useMarkThreadAsResolved() {
  return useMarkRoomThreadAsResolved(useRoom().id);
}
function useMarkRoomThreadAsResolved(roomId) {
  const client = useClient();
  return _react.useCallback.call(void 0, 
    (threadId) => {
      const updatedAt = /* @__PURE__ */ new Date();
      const { store, onMutationFailure } = getRoomExtrasForClient(client);
      const optimisticId = store.optimisticUpdates.add({
        type: "mark-thread-as-resolved",
        threadId,
        updatedAt
      });
      client[_core.kInternal].httpClient.markThreadAsResolved({ roomId, threadId }).then(
        () => {
          store.patchThread(
            threadId,
            optimisticId,
            { resolved: true },
            updatedAt
          );
        },
        (err) => onMutationFailure(
          optimisticId,
          { type: "MARK_THREAD_AS_RESOLVED_ERROR", roomId, threadId },
          err
        )
      );
    },
    [client, roomId]
  );
}
function useMarkThreadAsUnresolved() {
  return useMarkRoomThreadAsUnresolved(useRoom().id);
}
function useMarkRoomThreadAsUnresolved(roomId) {
  const client = useClient();
  return _react.useCallback.call(void 0, 
    (threadId) => {
      const updatedAt = /* @__PURE__ */ new Date();
      const { store, onMutationFailure } = getRoomExtrasForClient(client);
      const optimisticId = store.optimisticUpdates.add({
        type: "mark-thread-as-unresolved",
        threadId,
        updatedAt
      });
      client[_core.kInternal].httpClient.markThreadAsUnresolved({ roomId, threadId }).then(
        () => {
          store.patchThread(
            threadId,
            optimisticId,
            { resolved: false },
            updatedAt
          );
        },
        (err) => onMutationFailure(
          optimisticId,
          { type: "MARK_THREAD_AS_UNRESOLVED_ERROR", roomId, threadId },
          err
        )
      );
    },
    [client, roomId]
  );
}
function useThreadSubscription(threadId) {
  const client = useClient();
  const { store } = getRoomExtrasForClient(client);
  const signal = store.outputs.threadifications;
  const selector = _react.useCallback.call(void 0, 
    (state) => {
      const notification = state.sortedNotifications.find(
        (inboxNotification) => inboxNotification.kind === "thread" && inboxNotification.threadId === threadId
      );
      const thread = state.threadsDB.get(threadId);
      if (notification === void 0 || thread === void 0) {
        return { status: "not-subscribed" };
      }
      return {
        status: "subscribed",
        unreadSince: notification.readAt
      };
    },
    [threadId]
  );
  return useSignal(signal, selector, _client.shallow);
}
function useRoomNotificationSettings() {
  const updateRoomNotificationSettings = useUpdateRoomNotificationSettings();
  const client = useClient();
  const room = useRoom();
  const { store, getOrCreateNotificationsSettingsPollerForRoomId } = getRoomExtrasForClient(client);
  const poller = getOrCreateNotificationsSettingsPollerForRoomId(room.id);
  _react.useEffect.call(void 0, 
    () => void store.outputs.settingsByRoomId.getOrCreate(room.id).waitUntilLoaded()
    // NOTE: Deliberately *not* using a dependency array here!
    //
    // It is important to call waitUntil on *every* render.
    // This is harmless though, on most renders, except:
    // 1. The very first render, in which case we'll want to trigger the initial page fetch.
    // 2. All other subsequent renders now "just" return the same promise (a quick operation).
    // 3. If ever the promise would fail, then after 5 seconds it would reset, and on the very
    //    *next* render after that, a *new* fetch/promise will get created.
  );
  _react.useEffect.call(void 0, () => {
    poller.inc();
    poller.pollNowIfStale();
    return () => {
      poller.dec();
    };
  }, [poller]);
  const settings = useSignal(
    store.outputs.settingsByRoomId.getOrCreate(room.id).signal
  );
  return _react.useMemo.call(void 0, () => {
    return [settings, updateRoomNotificationSettings];
  }, [settings, updateRoomNotificationSettings]);
}
function useRoomNotificationSettingsSuspense() {
  ensureNotServerSide();
  const client = useClient();
  const store = getRoomExtrasForClient(client).store;
  const room = useRoom();
  use(store.outputs.settingsByRoomId.getOrCreate(room.id).waitUntilLoaded());
  const [settings, updateRoomNotificationSettings] = useRoomNotificationSettings();
  _core.assert.call(void 0, !settings.error, "Did not expect error");
  _core.assert.call(void 0, !settings.isLoading, "Did not expect loading");
  return _react.useMemo.call(void 0, () => {
    return [settings, updateRoomNotificationSettings];
  }, [settings, updateRoomNotificationSettings]);
}
function useHistoryVersionData(versionId) {
  const [state, setState] = _react.useState.call(void 0, {
    isLoading: true
  });
  const room = useRoom();
  _react.useEffect.call(void 0, () => {
    setState({ isLoading: true });
    const load = async () => {
      try {
        const response = await room[_core.kInternal].getTextVersion(versionId);
        const buffer = await response.arrayBuffer();
        const data = new Uint8Array(buffer);
        setState({
          isLoading: false,
          data
        });
      } catch (error) {
        setState({
          isLoading: false,
          error: error instanceof Error ? error : new Error(
            "An unknown error occurred while loading this version"
          )
        });
      }
    };
    void load();
  }, [room, versionId]);
  return state;
}
function useHistoryVersions() {
  const client = useClient();
  const room = useRoom();
  const { store, getOrCreateVersionsPollerForRoomId } = getRoomExtrasForClient(client);
  const poller = getOrCreateVersionsPollerForRoomId(room.id);
  _react.useEffect.call(void 0, () => {
    poller.inc();
    poller.pollNowIfStale();
    return () => poller.dec();
  }, [poller]);
  _react.useEffect.call(void 0, 
    () => void store.outputs.versionsByRoomId.getOrCreate(room.id).waitUntilLoaded()
    // NOTE: Deliberately *not* using a dependency array here!
    //
    // It is important to call waitUntil on *every* render.
    // This is harmless though, on most renders, except:
    // 1. The very first render, in which case we'll want to trigger the initial page fetch.
    // 2. All other subsequent renders now "just" return the same promise (a quick operation).
    // 3. If ever the promise would fail, then after 5 seconds it would reset, and on the very
    //    *next* render after that, a *new* fetch/promise will get created.
  );
  return useSignal(store.outputs.versionsByRoomId.getOrCreate(room.id).signal);
}
function useHistoryVersionsSuspense() {
  ensureNotServerSide();
  const client = useClient();
  const room = useRoom();
  const store = getRoomExtrasForClient(client).store;
  use(store.outputs.versionsByRoomId.getOrCreate(room.id).waitUntilLoaded());
  const result = useHistoryVersions();
  _core.assert.call(void 0, !result.error, "Did not expect error");
  _core.assert.call(void 0, !result.isLoading, "Did not expect loading");
  return result;
}
function useUpdateRoomNotificationSettings() {
  const client = useClient();
  const room = useRoom();
  return _react.useCallback.call(void 0, 
    (settings) => {
      const { store, onMutationFailure } = getRoomExtrasForClient(client);
      const optimisticId = store.optimisticUpdates.add({
        type: "update-notification-settings",
        roomId: room.id,
        settings
      });
      room.updateNotificationSettings(settings).then(
        (settings2) => {
          store.updateRoomNotificationSettings(room.id, optimisticId, settings2);
        },
        (err) => onMutationFailure(
          optimisticId,
          { type: "UPDATE_NOTIFICATION_SETTINGS_ERROR", roomId: room.id },
          err
        )
      );
    },
    [client, room]
  );
}
function useSuspendUntilPresenceReady() {
  ensureNotServerSide();
  const room = useRoom();
  use(room.waitUntilPresenceReady());
}
function useSelfSuspense(selector, isEqual) {
  useSuspendUntilPresenceReady();
  return useSelf(
    selector,
    isEqual
  );
}
function useOthersSuspense(selector, isEqual) {
  useSuspendUntilPresenceReady();
  return useOthers(
    selector,
    isEqual
  );
}
function useOthersConnectionIdsSuspense() {
  useSuspendUntilPresenceReady();
  return useOthersConnectionIds();
}
function useOthersMappedSuspense(itemSelector, itemIsEqual) {
  useSuspendUntilPresenceReady();
  return useOthersMapped(itemSelector, itemIsEqual);
}
function useOtherSuspense(connectionId, selector, isEqual) {
  useSuspendUntilPresenceReady();
  return useOther(connectionId, selector, isEqual);
}
function useSuspendUntilStorageReady() {
  ensureNotServerSide();
  const room = useRoom();
  use(room.waitUntilStorageReady());
}
function useStorageSuspense(selector, isEqual) {
  useSuspendUntilStorageReady();
  return useStorage(
    selector,
    isEqual
  );
}
function useStorageStatusSuspense(options) {
  useSuspendUntilStorageReady();
  return useStorageStatus(options);
}
function useThreadsSuspense(options = {}) {
  ensureNotServerSide();
  const client = useClient();
  const room = useRoom();
  const { store } = getRoomExtrasForClient(client);
  const queryKey = makeRoomThreadsQueryKey(room.id, options.query);
  use(store.outputs.loadingRoomThreads.getOrCreate(queryKey).waitUntilLoaded());
  const result = useThreads(options);
  _core.assert.call(void 0, !result.error, "Did not expect error");
  _core.assert.call(void 0, !result.isLoading, "Did not expect loading");
  return result;
}
function selectorFor_useAttachmentUrl(state) {
  if (state === void 0 || _optionalChain([state, 'optionalAccess', _28 => _28.isLoading])) {
    return _nullishCoalesce(state, () => ( { isLoading: true }));
  }
  if (state.error) {
    return state;
  }
  _core.assert.call(void 0, state.data !== void 0, "Unexpected missing attachment URL");
  return {
    isLoading: false,
    url: state.data
  };
}
function useAttachmentUrl(attachmentId) {
  const room = useRoom();
  return useRoomAttachmentUrl(attachmentId, room.id);
}
function useRoomAttachmentUrl(attachmentId, roomId) {
  const client = useClient();
  const store = client[_core.kInternal].httpClient.getOrCreateAttachmentUrlsStore(roomId);
  const getAttachmentUrlState = _react.useCallback.call(void 0, 
    () => store.getItemState(attachmentId),
    [store, attachmentId]
  );
  _react.useEffect.call(void 0, () => {
    void store.enqueue(attachmentId);
  }, [store, attachmentId]);
  return useSyncExternalStoreWithSelector(
    store.subscribe,
    getAttachmentUrlState,
    getAttachmentUrlState,
    selectorFor_useAttachmentUrl,
    _client.shallow
  );
}
function useAttachmentUrlSuspense(attachmentId) {
  const room = useRoom();
  const { attachmentUrlsStore } = room[_core.kInternal];
  const getAttachmentUrlState = _react.useCallback.call(void 0, 
    () => attachmentUrlsStore.getItemState(attachmentId),
    [attachmentUrlsStore, attachmentId]
  );
  const attachmentUrlState = getAttachmentUrlState();
  if (!attachmentUrlState || attachmentUrlState.isLoading) {
    throw attachmentUrlsStore.enqueue(attachmentId);
  }
  if (attachmentUrlState.error) {
    throw attachmentUrlState.error;
  }
  const state = _react.useSyncExternalStore.call(void 0, 
    attachmentUrlsStore.subscribe,
    getAttachmentUrlState,
    getAttachmentUrlState
  );
  _core.assert.call(void 0, state !== void 0, "Unexpected missing state");
  _core.assert.call(void 0, !state.isLoading, "Unexpected loading state");
  _core.assert.call(void 0, !state.error, "Unexpected error state");
  return {
    isLoading: false,
    url: state.data,
    error: void 0
  };
}
var NO_PERMISSIONS = /* @__PURE__ */ new Set();
function useRoomPermissions(roomId) {
  const client = useClient();
  const store = getRoomExtrasForClient(client).store;
  return useSignal(
    store.permissionHints.signal,
    (hints) => _nullishCoalesce(hints.get(roomId), () => ( NO_PERMISSIONS))
  );
}
function createRoomContext(client) {
  return getOrCreateRoomContextBundle(client);
}
var _RoomProvider = RoomProvider;
var _useBroadcastEvent = useBroadcastEvent;
var _useOthersListener = useOthersListener;
var _useRoom = useRoom;
var _useIsInsideRoom = useIsInsideRoom;
var _useAddReaction = useAddReaction;
var _useMutation = useMutation;
var _useCreateThread = useCreateThread;
var _useDeleteThread = useDeleteThread;
var _useEditThreadMetadata = useEditThreadMetadata;
var _useEventListener = useEventListener;
var _useMyPresence = useMyPresence;
var _useOthersMapped = useOthersMapped;
var _useOthersMappedSuspense = useOthersMappedSuspense;
var _useThreads = useThreads;
var _useThreadsSuspense = useThreadsSuspense;
var _useRoomNotificationSettings = useRoomNotificationSettings;
var _useRoomNotificationSettingsSuspense = useRoomNotificationSettingsSuspense;
var _useHistoryVersions = useHistoryVersions;
var _useHistoryVersionsSuspense = useHistoryVersionsSuspense;
var _useOther = useOther;
function _useOthers(...args) {
  return useOthers(...args);
}
var _useOtherSuspense = useOtherSuspense;
function _useOthersSuspense(...args) {
  return useOthersSuspense(...args);
}
var _useStorage = useStorage;
var _useStorageSuspense = useStorageSuspense;
function _useSelf(...args) {
  return useSelf(...args);
}
function _useSelfSuspense(...args) {
  return useSelfSuspense(...args);
}
var _useStorageRoot = useStorageRoot;
var _useUpdateMyPresence = useUpdateMyPresence;







































































































exports.RoomContext = RoomContext; exports.useRoomOrNull = useRoomOrNull; exports.useSyncExternalStoreWithSelector = useSyncExternalStoreWithSelector; exports.useSignal = useSignal; exports.ClientContext = ClientContext; exports.getUmbrellaStoreForClient = getUmbrellaStoreForClient; exports.useClientOrNull = useClientOrNull; exports.useClient = useClient; exports.LiveblocksProvider = LiveblocksProvider; exports.createLiveblocksContext = createLiveblocksContext; exports.useInboxNotifications = useInboxNotifications; exports.useInboxNotificationsSuspense = useInboxNotificationsSuspense; exports.useMarkAllInboxNotificationsAsRead = useMarkAllInboxNotificationsAsRead; exports.useMarkInboxNotificationAsRead = useMarkInboxNotificationAsRead; exports.useDeleteAllInboxNotifications = useDeleteAllInboxNotifications; exports.useDeleteInboxNotification = useDeleteInboxNotification; exports.useUnreadInboxNotificationsCount = useUnreadInboxNotificationsCount; exports.useUnreadInboxNotificationsCountSuspense = useUnreadInboxNotificationsCountSuspense; exports.useRoomInfo = useRoomInfo; exports.useRoomInfoSuspense = useRoomInfoSuspense; exports._useInboxNotificationThread = _useInboxNotificationThread; exports._useUser = _useUser; exports._useUserSuspense = _useUserSuspense; exports._useUserThreads_experimental = _useUserThreads_experimental; exports._useUserThreadsSuspense_experimental = _useUserThreadsSuspense_experimental; exports.useSyncStatus = useSyncStatus; exports.useErrorListener = useErrorListener; exports.useStatus = useStatus; exports.useReportTextEditor = useReportTextEditor; exports.useYjsProvider = useYjsProvider; exports.useCreateTextMention = useCreateTextMention; exports.useDeleteTextMention = useDeleteTextMention; exports.useResolveMentionSuggestions = useResolveMentionSuggestions; exports.useMentionSuggestionsCache = useMentionSuggestionsCache; exports.useStorageStatus = useStorageStatus; exports.useBatch = useBatch; exports.useLostConnectionListener = useLostConnectionListener; exports.useHistory = useHistory; exports.useUndo = useUndo; exports.useRedo = useRedo; exports.useCanUndo = useCanUndo; exports.useCanRedo = useCanRedo; exports.useOthersConnectionIds = useOthersConnectionIds; exports.useCreateRoomThread = useCreateRoomThread; exports.useDeleteRoomThread = useDeleteRoomThread; exports.useEditRoomThreadMetadata = useEditRoomThreadMetadata; exports.useCreateComment = useCreateComment; exports.useCreateRoomComment = useCreateRoomComment; exports.useEditComment = useEditComment; exports.useEditRoomComment = useEditRoomComment; exports.useDeleteComment = useDeleteComment; exports.useDeleteRoomComment = useDeleteRoomComment; exports.useAddRoomCommentReaction = useAddRoomCommentReaction; exports.useRemoveReaction = useRemoveReaction; exports.useRemoveRoomCommentReaction = useRemoveRoomCommentReaction; exports.useMarkThreadAsRead = useMarkThreadAsRead; exports.useMarkRoomThreadAsRead = useMarkRoomThreadAsRead; exports.useMarkThreadAsResolved = useMarkThreadAsResolved; exports.useMarkRoomThreadAsResolved = useMarkRoomThreadAsResolved; exports.useMarkThreadAsUnresolved = useMarkThreadAsUnresolved; exports.useMarkRoomThreadAsUnresolved = useMarkRoomThreadAsUnresolved; exports.useThreadSubscription = useThreadSubscription; exports.useHistoryVersionData = useHistoryVersionData; exports.useUpdateRoomNotificationSettings = useUpdateRoomNotificationSettings; exports.useOthersConnectionIdsSuspense = useOthersConnectionIdsSuspense; exports.useStorageStatusSuspense = useStorageStatusSuspense; exports.useAttachmentUrl = useAttachmentUrl; exports.useRoomAttachmentUrl = useRoomAttachmentUrl; exports.useAttachmentUrlSuspense = useAttachmentUrlSuspense; exports.useRoomPermissions = useRoomPermissions; exports.createRoomContext = createRoomContext; exports._RoomProvider = _RoomProvider; exports._useBroadcastEvent = _useBroadcastEvent; exports._useOthersListener = _useOthersListener; exports._useRoom = _useRoom; exports._useIsInsideRoom = _useIsInsideRoom; exports._useAddReaction = _useAddReaction; exports._useMutation = _useMutation; exports._useCreateThread = _useCreateThread; exports._useDeleteThread = _useDeleteThread; exports._useEditThreadMetadata = _useEditThreadMetadata; exports._useEventListener = _useEventListener; exports._useMyPresence = _useMyPresence; exports._useOthersMapped = _useOthersMapped; exports._useOthersMappedSuspense = _useOthersMappedSuspense; exports._useThreads = _useThreads; exports._useThreadsSuspense = _useThreadsSuspense; exports._useRoomNotificationSettings = _useRoomNotificationSettings; exports._useRoomNotificationSettingsSuspense = _useRoomNotificationSettingsSuspense; exports._useHistoryVersions = _useHistoryVersions; exports._useHistoryVersionsSuspense = _useHistoryVersionsSuspense; exports._useOther = _useOther; exports._useOthers = _useOthers; exports._useOtherSuspense = _useOtherSuspense; exports._useOthersSuspense = _useOthersSuspense; exports._useStorage = _useStorage; exports._useStorageSuspense = _useStorageSuspense; exports._useSelf = _useSelf; exports._useSelfSuspense = _useSelfSuspense; exports._useStorageRoot = _useStorageRoot; exports._useUpdateMyPresence = _useUpdateMyPresence;
//# sourceMappingURL=chunk-J5ZDLMBE.js.map