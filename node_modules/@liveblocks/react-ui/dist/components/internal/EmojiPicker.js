'use strict';

var jsxRuntime = require('react/jsx-runtime');
var PopoverPrimitive = require('@radix-ui/react-popover');
var react = require('react');
var config = require('../../config.js');
var constants = require('../../constants.js');
var Search = require('../../icons/Search.js');
var Spinner = require('../../icons/Spinner.js');
var overrides = require('../../overrides.js');
var index = require('../../primitives/EmojiPicker/index.js');
var classNames = require('../../utils/class-names.js');
var Emoji = require('./Emoji.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var PopoverPrimitive__namespace = /*#__PURE__*/_interopNamespaceDefault(PopoverPrimitive);

function EmojiPickerLoading({
  className,
  ...props
}) {
  return /* @__PURE__ */ jsxRuntime.jsx("div", {
    className: classNames.classNames("lb-loading lb-emoji-picker-loading", className),
    ...props,
    children: /* @__PURE__ */ jsxRuntime.jsx(Spinner.SpinnerIcon, {})
  });
}
function EmojiPickerEmpty({
  className,
  ...props
}) {
  const $ = overrides.useOverrides();
  return /* @__PURE__ */ jsxRuntime.jsx("div", {
    className: classNames.classNames("lb-empty lb-emoji-picker-empty", className),
    ...props,
    children: $.EMOJI_PICKER_EMPTY
  });
}
function EmojiPickerError({
  error,
  className,
  ...props
}) {
  const $ = overrides.useOverrides();
  return /* @__PURE__ */ jsxRuntime.jsx("div", {
    className: classNames.classNames("lb-error lb-emoji-picker-error", className),
    ...props,
    children: $.EMOJI_PICKER_ERROR(error)
  });
}
function EmojiPickerCategoryHeader({
  category,
  className,
  ...props
}) {
  return /* @__PURE__ */ jsxRuntime.jsx("div", {
    className: classNames.classNames("lb-emoji-picker-category-header", className),
    ...props,
    children: /* @__PURE__ */ jsxRuntime.jsx("span", {
      className: "lb-emoji-picker-category-header-title",
      children: category
    })
  });
}
function EmojiPickerGrid({
  children,
  className,
  ...props
}) {
  return /* @__PURE__ */ jsxRuntime.jsx("div", {
    className: classNames.classNames("lb-emoji-picker-grid", className),
    ...props,
    children
  });
}
function EmojiPickerRow({
  attributes,
  children,
  className,
  ...props
}) {
  const isFirstRow = react.useMemo(
    () => attributes.categoryRowIndex === 0,
    [attributes.categoryRowIndex]
  );
  const isLastRow = react.useMemo(
    () => attributes.categoryRowIndex === attributes.categoryRowsCount - 1,
    [attributes.categoryRowIndex, attributes.categoryRowsCount]
  );
  return /* @__PURE__ */ jsxRuntime.jsx("div", {
    className: classNames.classNames("lb-emoji-picker-row", className),
    "data-first": isFirstRow ? "" : void 0,
    "data-last": isLastRow ? "" : void 0,
    ...props,
    children
  });
}
function EmojiPickerEmoji({
  emoji,
  className,
  ...props
}) {
  return /* @__PURE__ */ jsxRuntime.jsx("button", {
    className: classNames.classNames("lb-emoji-picker-emoji", className),
    ...props,
    children: /* @__PURE__ */ jsxRuntime.jsx(Emoji.Emoji, {
      emoji
    })
  });
}
const EmojiPicker = react.forwardRef(
  ({ onEmojiSelect, onOpenChange, children, className, ...props }, forwardedRef) => {
    const [isOpen, setOpen] = react.useState(false);
    const { portalContainer } = config.useLiveblocksUIConfig();
    const $ = overrides.useOverrides();
    const handleOpenChange = react.useCallback(
      (isOpen2) => {
        setOpen(isOpen2);
        onOpenChange?.(isOpen2);
      },
      [onOpenChange]
    );
    const handleEmojiSelect = react.useCallback(
      (emoji) => {
        setOpen(false);
        onEmojiSelect?.(emoji);
      },
      [onEmojiSelect]
    );
    return /* @__PURE__ */ jsxRuntime.jsxs(PopoverPrimitive__namespace.Root, {
      open: isOpen,
      onOpenChange: handleOpenChange,
      children: [
        children,
        /* @__PURE__ */ jsxRuntime.jsx(PopoverPrimitive__namespace.Portal, {
          container: portalContainer,
          children: /* @__PURE__ */ jsxRuntime.jsx(PopoverPrimitive__namespace.Content, {
            side: "top",
            align: "center",
            sideOffset: constants.FLOATING_ELEMENT_SIDE_OFFSET,
            collisionPadding: constants.FLOATING_ELEMENT_COLLISION_PADDING,
            className: classNames.classNames(
              "lb-root lb-portal lb-elevation lb-emoji-picker",
              className
            ),
            ...props,
            ref: forwardedRef,
            children: /* @__PURE__ */ jsxRuntime.jsxs(index.Root, {
              onEmojiSelect: handleEmojiSelect,
              locale: $.locale,
              children: [
                /* @__PURE__ */ jsxRuntime.jsx("div", {
                  className: "lb-emoji-picker-header",
                  children: /* @__PURE__ */ jsxRuntime.jsxs("div", {
                    className: "lb-emoji-picker-search-container",
                    children: [
                      /* @__PURE__ */ jsxRuntime.jsx(index.Search, {
                        className: "lb-emoji-picker-search",
                        placeholder: $.EMOJI_PICKER_SEARCH_PLACEHOLDER,
                        autoFocus: true
                      }),
                      /* @__PURE__ */ jsxRuntime.jsx(Search.SearchIcon, {})
                    ]
                  })
                }),
                /* @__PURE__ */ jsxRuntime.jsx(index.Content, {
                  className: "lb-emoji-picker-content",
                  components: {
                    Loading: EmojiPickerLoading,
                    Empty: EmojiPickerEmpty,
                    Error: EmojiPickerError,
                    CategoryHeader: EmojiPickerCategoryHeader,
                    Grid: EmojiPickerGrid,
                    Row: EmojiPickerRow,
                    Emoji: EmojiPickerEmoji
                  }
                })
              ]
            })
          })
        })
      ]
    });
  }
);

Object.defineProperty(exports, 'EmojiPickerTrigger', {
  enumerable: true,
  get: function () { return PopoverPrimitive.PopoverTrigger; }
});
exports.EmojiPicker = EmojiPicker;
//# sourceMappingURL=EmojiPicker.js.map
