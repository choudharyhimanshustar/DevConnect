'use strict';

var jsxRuntime = require('react/jsx-runtime');
var LexicalComposerContext = require('@lexical/react/LexicalComposerContext');
var lexical = require('lexical');
var react = require('react');

function Mention({
  nodeKey,
  children
}) {
  const [editor] = LexicalComposerContext.useLexicalComposerContext();
  const isSelected = useIsNodeSelected(nodeKey);
  function handleClick(event) {
    editor.update(() => {
      event.stopPropagation();
      event.preventDefault();
      const selection = lexical.$createNodeSelection();
      selection.add(nodeKey);
      lexical.$setSelection(selection);
    });
  }
  return /* @__PURE__ */ jsxRuntime.jsx("span", {
    onClick: handleClick,
    "data-selected": isSelected ? "" : void 0,
    className: "lb-root lb-lexical-mention",
    children
  });
}
function $isNodeSelected(key) {
  const node = lexical.$getNodeByKey(key);
  if (node === null)
    return false;
  return node.isSelected();
}
function useIsNodeSelected(key) {
  const [editor] = LexicalComposerContext.useLexicalComposerContext();
  const subscribe = react.useCallback(
    (onStoreChange) => {
      return editor.registerUpdateListener(onStoreChange);
    },
    [editor]
  );
  const getSnapshot = react.useCallback(() => {
    return editor.getEditorState().read(() => $isNodeSelected(key));
  }, [editor, key]);
  return react.useSyncExternalStore(subscribe, getSnapshot, getSnapshot);
}

exports.Mention = Mention;
//# sourceMappingURL=mention-component.js.map
