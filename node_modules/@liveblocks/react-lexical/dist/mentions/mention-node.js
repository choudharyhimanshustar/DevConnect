'use strict';

var jsxRuntime = require('react/jsx-runtime');
var core = require('@liveblocks/core');
var lexical = require('lexical');
var mentionComponent = require('./mention-component.js');
var user = require('./user.js');

const MENTION_CHARACTER = "@";
class MentionNode extends lexical.DecoratorNode {
  __id;
  __userId;
  constructor(id, userId, key) {
    super(key);
    this.__id = id;
    this.__userId = userId;
  }
  static getType() {
    return "lb-mention";
  }
  static clone(node) {
    return new MentionNode(node.__id, node.__userId);
  }
  createDOM() {
    const element = document.createElement("span");
    element.style.display = "inline-block";
    element.style.userSelect = "none";
    return element;
  }
  updateDOM() {
    return false;
  }
  static importDom() {
    return {
      span: () => ({
        conversion: (element) => {
          const value = atob(element.getAttribute("data-lexical-lb-mention"));
          const node = $createMentionNode(value);
          return { node };
        },
        priority: 1
      })
    };
  }
  exportDOM() {
    const element = document.createElement("span");
    const value = this.getTextContent();
    element.setAttribute("data-lexical-lb-mention", btoa(value));
    element.textContent = this.getTextContent();
    return { element };
  }
  static importJSON(serializedNode) {
    const node = $createMentionNode(serializedNode.userId);
    return node;
  }
  exportJSON() {
    return {
      userId: this.__userId,
      type: "lb-mention",
      version: 1
    };
  }
  getUserId() {
    const self = this.getLatest();
    return self.__userId;
  }
  getId() {
    const self = this.getLatest();
    return self.__id;
  }
  decorate() {
    return /* @__PURE__ */ jsxRuntime.jsxs(mentionComponent.Mention, {
      nodeKey: this.getKey(),
      children: [
        MENTION_CHARACTER,
        /* @__PURE__ */ jsxRuntime.jsx(user.User, {
          userId: this.getUserId()
        })
      ]
    });
  }
}
function $isMentionNode(node) {
  return node instanceof MentionNode;
}
function $createMentionNode(userId) {
  const node = new MentionNode(core.createInboxNotificationId(), userId);
  return lexical.$applyNodeReplacement(node);
}

exports.$createMentionNode = $createMentionNode;
exports.$isMentionNode = $isMentionNode;
exports.MentionNode = MentionNode;
//# sourceMappingURL=mention-node.js.map
