export { C as ClientContext, L as LiveblocksProvider, M as MutationContext, R as RoomContext, H as RoomProvider, U as UseStorageStatusOptions, w as UseThreadsOptions, x as createLiveblocksContext, G as createRoomContext, I as useAddReaction, ao as useAttachmentUrl, J as useBatch, K as useBroadcastEvent, N as useCanRedo, O as useCanUndo, y as useClient, P as useCreateComment, Q as useCreateThread, z as useDeleteAllInboxNotifications, S as useDeleteComment, A as useDeleteInboxNotification, T as useDeleteThread, V as useEditComment, W as useEditThreadMetadata, B as useErrorListener, Z as useEventListener, $ as useHistory, af as useHistoryVersionData, ap as useHistoryVersions, _ as useInboxNotificationThread, ar as useInboxNotifications, a0 as useIsInsideRoom, a1 as useLostConnectionListener, D as useMarkAllInboxNotificationsAsRead, E as useMarkInboxNotificationAsRead, a2 as useMarkThreadAsRead, X as useMarkThreadAsResolved, Y as useMarkThreadAsUnresolved, a3 as useMutation, a4 as useMyPresence, ag as useOther, ah as useOthers, ai as useOthersConnectionIds, a5 as useOthersListener, aj as useOthersMapped, a6 as useRedo, a7 as useRemoveReaction, a8 as useRoom, at as useRoomInfo, aq as useRoomNotificationSettings, ak as useSelf, a9 as useStatus, al as useStorage, aa as useStorageRoot, am as useStorageStatus, F as useSyncStatus, ab as useThreadSubscription, an as useThreads, ac as useUndo, au as useUnreadInboxNotificationsCount, ad as useUpdateMyPresence, ae as useUpdateRoomNotificationSettings, av as useUser, as as useUserThreads_experimental } from './room-DVbQkoj3.mjs';
export { Json, JsonObject, shallow } from '@liveblocks/client';
import * as react_jsx_runtime from 'react/jsx-runtime';
import { ReactNode } from 'react';
import '@liveblocks/core';

type Props = {
    fallback: ReactNode;
    children: (() => ReactNode | undefined) | ReactNode | undefined;
};
/**
 * Almost like a normal <Suspense> component, except that for server-side
 * renders, the fallback will be used.
 *
 * The child props will have to be provided in a function, i.e. change:
 *
 *   <Suspense fallback={<Loading />}>
 *     <MyRealComponent a={1} />
 *   </Suspense>
 *
 * To:
 *
 *   <ClientSideSuspense fallback={<Loading />}>
 *     <MyRealComponent a={1} />
 *   </ClientSideSuspense>
 *
 */
declare function ClientSideSuspense(props: Props): react_jsx_runtime.JSX.Element;

export { ClientSideSuspense };
